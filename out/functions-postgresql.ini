[ABBREV]
declaration=inet
category=Network Address Functions
description=Creates an abbreviated display format as text. (The result is the same as\nthe inet output function produces; it is "abbreviated" only in comparison\nto the result of an explicit cast to text, which for historical reasons\nwill never suppress the netmask part.)
[ABS]
declaration=numeric_type
category=Numeric/Math Functions
description=Absolute value
[ACLDEFAULT]
declaration=type "char", ownerId oid
category=Session Information Functions
description=Constructs an aclitem array holding the default access privileges for an\nobject of type type belonging to the role with OID ownerId. This represents\nthe access privileges that will be assumed when an object's ACL entry is\nnull. (The default access privileges are described in Section 5.8.) The\ntype parameter must be one of 'c' for COLUMN, 'r' for TABLE and table-like\nobjects, 's' for SEQUENCE, 'd' for DATABASE, 'f' for FUNCTION or PROCEDURE,\n'l' for LANGUAGE, 'L' for LARGE OBJECT, 'n' for SCHEMA, 'p' for PARAMETER,\n't' for TABLESPACE, 'F' for FOREIGN DATA WRAPPER, 'S' for FOREIGN SERVER,\nor 'T' for TYPE or DOMAIN.
[ACLEXPLODE]
declaration=aclitem[]
category=Session Information Functions
description=Returns the aclitem array as a set of rows. If the grantee is the\npseudo-role PUBLIC, it is represented by zero in the grantee column. Each\ngranted privilege is represented as SELECT, INSERT, etc (see Table 5.1 for\na full list). Note that each privilege is broken out as a separate row, so\nonly one keyword appears in the privilege_type column.
[ACOS]
declaration=double precision
category=Numeric/Math Functions
description=Inverse cosine, result in radians
[ACOSD]
declaration=double precision
category=Numeric/Math Functions
description=Inverse cosine, result in degrees
[ACOSH]
declaration=double precision
category=Numeric/Math Functions
description=Inverse hyperbolic cosine
[AGE1]
name=AGE
declaration=timestamp, timestamp
category=Date/Time Functions
description=Subtract arguments, producing a "symbolic" result that uses years and\nmonths, rather than just days
[AGE2]
name=AGE
declaration=xid
category=Session Information Functions
description=Returns the number of transactions between the supplied transaction id and\nthe current transaction counter.
[ANY_VALUE]
declaration=anyelement
category=Aggregate Functions
description=Returns an arbitrary value from the non-null input values.
[AREA]
declaration=geometric_type
category=Geometric Functions
description=Computes area. Available for box, path, circle. A path input must be\nclosed, else NULL is returned. Also, if the path is self-intersecting, the\nresult may be meaningless.
[ARRAY_AGG]
declaration=anynonarray ORDER BY input_sort_columns
category=Aggregate Functions
description=Collects all the input values, including nulls, into an array.
[ARRAY_APPEND]
declaration=anycompatiblearray, anycompatible
category=Array Functions
description=Appends an element to the end of an array (same as the anycompatiblearray\n|| anycompatible operator).
[ARRAY_CAT]
declaration=anycompatiblearray, anycompatiblearray
category=Array Functions
description=Concatenates two arrays (same as the anycompatiblearray ||\nanycompatiblearray operator).
[ARRAY_DIMS]
declaration=anyarray
category=Array Functions
description=Returns a text representation of the array's dimensions.
[ARRAY_FILL]
declaration=anyelement, integer[] [, integer[] ]
category=Array Functions
description=Returns an array filled with copies of the given value, having dimensions\nof the lengths specified by the second argument. The optional third\nargument supplies lower-bound values for each dimension (which default to\nall 1).
[ARRAY_LENGTH]
declaration=anyarray, integer
category=Array Functions
description=Returns the length of the requested array dimension. (Produces NULL instead\nof 0 for empty or missing array dimensions.)
[ARRAY_LOWER]
declaration=anyarray, integer
category=Array Functions
description=Returns the lower bound of the requested array dimension.
[ARRAY_NDIMS]
declaration=anyarray
category=Array Functions
description=Returns the number of dimensions of the array.
[ARRAY_POSITION]
declaration=anycompatiblearray, anycompatible [, integer ]
category=Array Functions
description=Returns the subscript of the first occurrence of the second argument in the\narray, or NULL if it's not present. If the third argument is given, the\nsearch begins at that subscript. The array must be one-dimensional.\nComparisons are done using IS NOT DISTINCT FROM semantics, so it is\npossible to search for NULL.
[ARRAY_POSITIONS]
declaration=anycompatiblearray, anycompatible
category=Array Functions
description=Returns an array of the subscripts of all occurrences of the second\nargument in the array given as first argument. The array must be\none-dimensional. Comparisons are done using IS NOT DISTINCT FROM semantics,\nso it is possible to search for NULL. NULL is returned only if the array is\nNULL; if the value is not found in the array, an empty array is returned.
[ARRAY_PREPEND]
declaration=anycompatible, anycompatiblearray
category=Array Functions
description=Prepends an element to the beginning of an array (same as the anycompatible\n|| anycompatiblearray operator).
[ARRAY_REMOVE]
declaration=anycompatiblearray, anycompatible
category=Array Functions
description=Removes all elements equal to the given value from the array. The array\nmust be one-dimensional. Comparisons are done using IS NOT DISTINCT FROM\nsemantics, so it is possible to remove NULLs.
[ARRAY_REPLACE]
declaration=anycompatiblearray, anycompatible, anycompatible
category=Array Functions
description=Replaces each array element equal to the second argument with the third\nargument.
[ARRAY_SAMPLE]
declaration=array anyarray, n integer
category=Array Functions
description=Returns an array of n items randomly selected from array. n may not exceed\nthe length of array's first dimension. If array is multi-dimensional, an\n"item" is a slice having a given first subscript.
[ARRAY_SHUFFLE]
declaration=anyarray
category=Array Functions
description=Randomly shuffles the first dimension of the array.
[ARRAY_TO_JSON]
declaration=anyarray [, boolean ]
category=JSON Functions
description=Converts an SQL array to a JSON array. The behavior is the same as to_json\nexcept that line feeds will be added between top-level array elements if\nthe optional boolean parameter is true.
[ARRAY_TO_STRING]
declaration=array anyarray, delimiter text [, null_string text ]
category=Array Functions
description=Converts each array element to its text representation, and concatenates\nthose separated by the delimiter string. If null_string is given and is not\nNULL, then NULL array entries are represented by that string; otherwise,\nthey are omitted. See also string_to_array.
[ARRAY_TO_TSVECTOR]
declaration=text[]
category=Text Search Functions
description=Converts an array of text strings to a tsvector. The given strings are used\nas lexemes as-is, without further processing. Array elements must not be\nempty strings or NULL.
[ARRAY_UPPER]
declaration=anyarray, integer
category=Array Functions
description=Returns the upper bound of the requested array dimension.
[ASCII]
declaration=text
category=String Functions
description=Returns the numeric code of the first character of the argument. In UTF8\nencoding, returns the Unicode code point of the character. In other\nmultibyte encodings, the argument must be an ASCII character.
[ASIN]
declaration=double precision
category=Numeric/Math Functions
description=Inverse sine, result in radians
[ASIND]
declaration=double precision
category=Numeric/Math Functions
description=Inverse sine, result in degrees
[ASINH]
declaration=double precision
category=Numeric/Math Functions
description=Inverse hyperbolic sine
[ATAN]
declaration=double precision
category=Numeric/Math Functions
description=Inverse tangent, result in radians
[ATAN2]
declaration=y double precision, x double precision
category=Numeric/Math Functions
description=Inverse tangent of y/x, result in radians
[ATAN2D]
declaration=y double precision, x double precision
category=Numeric/Math Functions
description=Inverse tangent of y/x, result in degrees
[ATAND]
declaration=double precision
category=Numeric/Math Functions
description=Inverse tangent, result in degrees
[ATANH]
declaration=double precision
category=Numeric/Math Functions
description=Inverse hyperbolic tangent
[BIT_COUNT]
declaration=bit
category=Bit String Functions
description=Returns the number of bits set in the bit string (also known as\n"popcount").
[BIT_LENGTH1]
name=BIT_LENGTH
declaration=text
category=String Functions
description=Returns number of bits in the string (8 times the octet_length).
[BIT_LENGTH2]
name=BIT_LENGTH
declaration=bytea
category=Binary String Functions
description=Returns number of bits in the binary string (8 times the octet_length).
[BIT_LENGTH3]
name=BIT_LENGTH
declaration=bit
category=Bit String Functions
description=Returns number of bits in the bit string.
[BOOL_AND]
declaration=boolean
category=Aggregate Functions
description=Returns true if all non-null input values are true, otherwise false.
[BOOL_OR]
declaration=boolean
category=Aggregate Functions
description=Returns true if any non-null input value is true, otherwise false.
[BOUND_BOX]
declaration=box, box
category=Geometric Functions
description=Computes bounding box of two boxes.
[BOX]
declaration=circle
category=Geometric Functions
description=Computes box inscribed within the circle.
[BRIN_DESUMMARIZE_RANGE]
declaration=index regclass, blockNumber bigint
category=System Administration Functions
description=Removes the BRIN index tuple that summarizes the page range covering the\ngiven table block, if there is one.
[BRIN_SUMMARIZE_NEW_VALUES]
declaration=index regclass
category=System Administration Functions
description=Scans the specified BRIN index to find page ranges in the base table that\nare not currently summarized by the index; for any such range it creates a\nnew summary index tuple by scanning those table pages. Returns the number\nof new page range summaries that were inserted into the index.
[BRIN_SUMMARIZE_RANGE]
declaration=index regclass, blockNumber bigint
category=System Administration Functions
description=Summarizes the page range covering the given block, if not already\nsummarized. This is like brin_summarize_new_values except that it only\nprocesses the page range that covers the given table block number.
[BROADCAST]
declaration=inet
category=Network Address Functions
description=Computes the broadcast address for the address's network.
[BTRIM1]
name=BTRIM
declaration=string text [, characters text ]
category=String Functions
description=Removes the longest string containing only characters in characters (a\nspace by default) from the start and end of string.
[BTRIM2]
name=BTRIM
declaration=bytes bytea, bytesremoved bytea
category=Binary String Functions
description=Removes the longest string containing only bytes appearing in bytesremoved\nfrom the start and end of bytes.
[CARDINALITY]
declaration=anyarray
category=Array Functions
description=Returns the total number of elements in the array, or 0 if the array is\nempty.
[CBRT]
declaration=double precision
category=Numeric/Math Functions
description=Cube root
[CENTER]
declaration=geometric_type
category=Geometric Functions
description=Computes center point. Available for box, circle.
[CHARACTER_LENGTH]
declaration=text
category=String Functions
description=Returns number of characters in the string.
[CHR]
declaration=integer
category=String Functions
description=Returns the character with the given code. In UTF8 encoding the argument is\ntreated as a Unicode code point. In other multibyte encodings the argument\nmust designate an ASCII character. chr(0) is disallowed because text data\ntypes cannot store that character.
[CIRCLE]
declaration=box
category=Geometric Functions
description=Computes smallest circle enclosing box.
[CLOCK_TIMESTAMP]
declaration=
category=Date/Time Functions
description=Current date and time (changes during statement execution); see Section\n9.9.5
[COL_DESCRIPTION]
declaration=table oid, column integer
category=Session Information Functions
description=Returns the comment for a table column, which is specified by the OID of\nits table and its column number. (obj_description cannot be used for table\ncolumns, since columns do not have OIDs of their own.)
[CONCAT]
declaration=val1 "any" [, val2 "any" [, ...] ]
category=String Functions
description=Concatenates the text representations of all the arguments. NULL arguments\nare ignored.
[CONCAT_WS]
declaration=sep text, val1 "any" [, val2 "any" [, ...] ]
category=String Functions
description=Concatenates all but the first argument, with separators. The first\nargument is used as the separator string, and should not be NULL. Other\nNULL arguments are ignored.
[CONVERT]
declaration=bytes bytea, src_encoding name, dest_encoding name
category=Binary String Functions
description=Converts a binary string representing text in encoding src_encoding to a\nbinary string in encoding dest_encoding (see Section 23.3.4 for available\nconversions).
[CONVERT_FROM]
declaration=bytes bytea, src_encoding name
category=Binary String Functions
description=Converts a binary string representing text in encoding src_encoding to text\nin the database encoding (see Section 23.3.4 for available conversions).
[CONVERT_TO]
declaration=string text, dest_encoding name
category=Binary String Functions
description=Converts a text string (in the database encoding) to a binary string\nencoded in encoding dest_encoding (see Section 23.3.4 for available\nconversions).
[COS]
declaration=double precision
category=Numeric/Math Functions
description=Cosine, argument in radians
[COSD]
declaration=double precision
category=Numeric/Math Functions
description=Cosine, argument in degrees
[COSH]
declaration=double precision
category=Numeric/Math Functions
description=Hyperbolic cosine
[COT]
declaration=double precision
category=Numeric/Math Functions
description=Cotangent, argument in radians
[COTD]
declaration=double precision
category=Numeric/Math Functions
description=Cotangent, argument in degrees
[COUNT]
declaration=*
category=Aggregate Functions
description=Computes the number of input rows.
[CUME_DIST1]
name=CUME_DIST
declaration=args
category=Aggregate Functions
description=Computes the cumulative distribution, that is (number of rows preceding or\npeers with hypothetical row) / (total rows). The value thus ranges from 1/N\nto 1.
[CUME_DIST2]
name=CUME_DIST
declaration=
category=Window Functions
description=Returns the cumulative distribution, that is (number of partition rows\npreceding or peers with current row) / (total partition rows). The value\nthus ranges from 1/N to 1.
[CURRENT_DATABASE]
declaration=
category=Session Information Functions
description=Returns the name of the current database. (Databases are called "catalogs"\nin the SQL standard, so current_catalog is the standard's spelling.)
[CURRENT_QUERY]
declaration=
category=Session Information Functions
description=Returns the text of the currently executing query, as submitted by the\nclient (which might contain more than one statement).
[CURRENT_SETTING]
declaration=setting_name text [, missing_ok boolean ]
category=System Administration Functions
description=Returns the current value of the setting setting_name. If there is no such\nsetting, current_setting throws an error unless missing_ok is supplied and\nis true (in which case NULL is returned). This function corresponds to the\nSQL command SHOW.
[CURRVAL]
declaration=regclass
category=Sequence Manipulation Functions
description=Returns the value most recently obtained by nextval for this sequence in\nthe current session. (An error is reported if nextval has never been called\nfor this sequence in this session.) Because this is returning a\nsession-local value, it gives a predictable answer whether or not other\nsessions have executed nextval since the current session did.
[DATE_ADD]
declaration=timestamp with time zone, interval [, text ]
category=Date/Time Functions
description=Add an interval to a timestamp with time zone, computing times of day and\ndaylight-savings adjustments according to the time zone named by the third\nargument, or the current TimeZone setting if that is omitted. The form with\ntwo arguments is equivalent to the timestamp with time zone + interval\noperator.
[DATE_PART]
declaration=text, timestamp
category=Date/Time Functions
description=Get timestamp subfield (equivalent to extract); see Section 9.9.1
[DATE_SUBTRACT]
declaration=timestamp with time zone, interval [, text ]
category=Date/Time Functions
description=Subtract an interval from a timestamp with time zone, computing times of\nday and daylight-savings adjustments according to the time zone named by\nthe third argument, or the current TimeZone setting if that is omitted. The\nform with two arguments is equivalent to the timestamp with time zone -\ninterval operator.
[DATE_TRUNC]
declaration=text, timestamp
category=Date/Time Functions
description=Truncate to specified precision; see Section 9.9.2
[DECODE]
declaration=string text, format text
category=Binary String Functions
description=Decodes binary data from a textual representation; supported format values\nare the same as for encode.
[DEGREES]
declaration=double precision
category=Numeric/Math Functions
description=Converts radians to degrees
[DENSE_RANK1]
name=DENSE_RANK
declaration=args
category=Aggregate Functions
description=Computes the rank of the hypothetical row, without gaps; this function\neffectively counts peer groups.
[DENSE_RANK2]
name=DENSE_RANK
declaration=
category=Window Functions
description=Returns the rank of the current row, without gaps; this function\neffectively counts peer groups.
[DIAGONAL]
declaration=box
category=Geometric Functions
description=Extracts box's diagonal as a line segment (same as lseg(box)).
[DIAMETER]
declaration=circle
category=Geometric Functions
description=Computes diameter of circle.
[DIV]
declaration=y numeric, x numeric
category=Numeric/Math Functions
description=Integer quotient of y/x (truncates towards zero)
[ENCODE]
declaration=bytes bytea, format text
category=Binary String Functions
description=Encodes binary data into a textual representation; supported format values\nare: base64, escape, hex.
[ENUM_FIRST]
declaration=anyenum
category=Enum Support Functions
description=Returns the first value of the input enum type.
[ENUM_LAST]
declaration=anyenum
category=Enum Support Functions
description=Returns the last value of the input enum type.
[ENUM_RANGE]
declaration=anyenum
category=Enum Support Functions
description=Returns all values of the input enum type in an ordered array.
[ERF]
declaration=double precision
category=Numeric/Math Functions
description=Error function
[ERFC]
declaration=double precision
category=Numeric/Math Functions
description=Complementary error function (1 - erf(x), without loss of precision for\nlarge inputs)
[EVERY]
declaration=boolean
category=Aggregate Functions
description=This is the SQL standard's equivalent to bool_and.
[EXTRACT]
declaration=field from timestamp
category=Date/Time Functions
description=Get timestamp subfield; see Section 9.9.1
[FACTORIAL]
declaration=bigint
category=Numeric/Math Functions
description=Factorial
[FAMILY]
declaration=inet
category=Network Address Functions
description=Returns the address's family: 4 for IPv4, 6 for IPv6.
[FIRST_VALUE]
declaration=value anyelement
category=Window Functions
description=Returns value evaluated at the row that is the first row of the window\nframe.
[FORMAT]
declaration=formatstr text [, formatarg "any" [, ...] ]
category=String Functions
description=Formats arguments according to a format string; see Section 9.4.1. This\nfunction is similar to the C function sprintf.
[FORMAT_TYPE]
declaration=type oid, typemod integer
category=Session Information Functions
description=Returns the SQL name for a data type that is identified by its type OID and\npossibly a type modifier. Pass NULL for the type modifier if no specific\nmodifier is known.
[GCD]
declaration=numeric_type, numeric_type
category=Numeric/Math Functions
description=Greatest common divisor (the largest positive number that divides both\ninputs with no remainder); returns 0 if both inputs are zero; available for\ninteger, bigint, and numeric
[GET_BIT1]
name=GET_BIT
declaration=bytes bytea, n bigint
category=Binary String Functions
description=Extracts n'th bit from binary string.
[GET_BIT2]
name=GET_BIT
declaration=bits bit, n integer
category=Bit String Functions
description=Extracts n'th bit from bit string; the first (leftmost) bit is bit 0.
[GET_BYTE]
declaration=bytes bytea, n integer
category=Binary String Functions
description=Extracts n'th byte from binary string.
[GET_CURRENT_TS_CONFIG]
declaration=
category=Text Search Functions
description=Returns the OID of the current default text search configuration (as set by\ndefault_text_search_config).
[GIN_CLEAN_PENDING_LIST]
declaration=index regclass
category=System Administration Functions
description=Cleans up the "pending" list of the specified GIN index by moving entries\nin it, in bulk, to the main GIN data structure. Returns the number of pages\nremoved from the pending list. If the argument is a GIN index built with\nthe fastupdate option disabled, no cleanup happens and the result is zero,\nbecause the index doesn't have a pending list. See Section 64.4.4.1 and\nSection 64.4.5 for details about the pending list and fastupdate option.
[GROUPING]
declaration=group_by_expression(s
category=Aggregate Functions
description=Returns a bit mask indicating which GROUP BY expressions are not included\nin the current grouping set. Bits are assigned with the rightmost argument\ncorresponding to the least-significant bit; each bit is 0 if the\ncorresponding expression is included in the grouping criteria of the\ngrouping set generating the current result row, and 1 if it is not\nincluded.
[HAS_ANY_COLUMN_PRIVILEGE]
declaration=[ user name or oid, ] table text or oid, privilege text
category=Session Information Functions
description=Does user have privilege for any column of table? This succeeds either if\nthe privilege is held for the whole table, or if there is a column-level\ngrant of the privilege for at least one column. Allowable privilege types\nare SELECT, INSERT, UPDATE, and REFERENCES.
[HAS_COLUMN_PRIVILEGE]
declaration=[ user name or oid, ] table text or oid, column text or smallint, privilege text
category=Session Information Functions
description=Does user have privilege for the specified table column? This succeeds\neither if the privilege is held for the whole table, or if there is a\ncolumn-level grant of the privilege for the column. The column can be\nspecified by name or by attribute number (pg_attribute.attnum). Allowable\nprivilege types are SELECT, INSERT, UPDATE, and REFERENCES.
[HAS_DATABASE_PRIVILEGE]
declaration=[ user name or oid, ] database text or oid, privilege text
category=Session Information Functions
description=Does user have privilege for database? Allowable privilege types are\nCREATE, CONNECT, TEMPORARY, and TEMP (which is equivalent to TEMPORARY).
[HAS_FOREIGN_DATA_WRAPPER_PRIVILEGE]
declaration=[ user name or oid, ] fdw text or oid, privilege text
category=Session Information Functions
description=Does user have privilege for foreign-data wrapper? The only allowable\nprivilege type is USAGE.
[HAS_FUNCTION_PRIVILEGE]
declaration=[ user name or oid, ] function text or oid, privilege text
category=Session Information Functions
description=Does user have privilege for function? The only allowable privilege type is\nEXECUTE.
[HAS_LANGUAGE_PRIVILEGE]
declaration=[ user name or oid, ] language text or oid, privilege text
category=Session Information Functions
description=Does user have privilege for language? The only allowable privilege type is\nUSAGE.
[HAS_PARAMETER_PRIVILEGE]
declaration=[ user name or oid, ] parameter text, privilege text
category=Session Information Functions
description=Does user have privilege for configuration parameter? The parameter name is\ncase-insensitive. Allowable privilege types are SET and ALTER SYSTEM.
[HAS_SCHEMA_PRIVILEGE]
declaration=[ user name or oid, ] schema text or oid, privilege text
category=Session Information Functions
description=Does user have privilege for schema? Allowable privilege types are CREATE\nand USAGE.
[HAS_SEQUENCE_PRIVILEGE]
declaration=[ user name or oid, ] sequence text or oid, privilege text
category=Session Information Functions
description=Does user have privilege for sequence? Allowable privilege types are USAGE,\nSELECT, and UPDATE.
[HAS_SERVER_PRIVILEGE]
declaration=[ user name or oid, ] server text or oid, privilege text
category=Session Information Functions
description=Does user have privilege for foreign server? The only allowable privilege\ntype is USAGE.
[HAS_TABLESPACE_PRIVILEGE]
declaration=[ user name or oid, ] tablespace text or oid, privilege text
category=Session Information Functions
description=Does user have privilege for tablespace? The only allowable privilege type\nis CREATE.
[HAS_TABLE_PRIVILEGE]
declaration=[ user name or oid, ] table text or oid, privilege text
category=Session Information Functions
description=Does user have privilege for table? Allowable privilege types are SELECT,\nINSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER, and MAINTAIN.
[HAS_TYPE_PRIVILEGE]
declaration=[ user name or oid, ] type text or oid, privilege text
category=Session Information Functions
description=Does user have privilege for data type? The only allowable privilege type\nis USAGE. When specifying a type by name rather than by OID, the allowed\ninput is the same as for the regtype data type (see Section 8.19).
[HEIGHT]
declaration=box
category=Geometric Functions
description=Computes vertical size of box.
[HOST]
declaration=inet
category=Network Address Functions
description=Returns the IP address as text, ignoring the netmask.
[HOSTMASK]
declaration=inet
category=Network Address Functions
description=Computes the host mask for the address's network.
[ICU_UNICODE_VERSION]
declaration=
category=Session Information Functions
description=Returns a string representing the version of Unicode used by ICU, if the\nserver was built with ICU support; otherwise returns NULL
[INET_CLIENT_ADDR]
declaration=
category=Session Information Functions
description=Returns the IP address of the current client, or NULL if the current\nconnection is via a Unix-domain socket.
[INET_CLIENT_PORT]
declaration=
category=Session Information Functions
description=Returns the IP port number of the current client, or NULL if the current\nconnection is via a Unix-domain socket.
[INET_MERGE]
declaration=inet, inet
category=Network Address Functions
description=Computes the smallest network that includes both of the given networks.
[INET_SAME_FAMILY]
declaration=inet, inet
category=Network Address Functions
description=Tests whether the addresses belong to the same IP family.
[INET_SERVER_ADDR]
declaration=
category=Session Information Functions
description=Returns the IP address on which the server accepted the current connection,\nor NULL if the current connection is via a Unix-domain socket.
[INET_SERVER_PORT]
declaration=
category=Session Information Functions
description=Returns the IP port number on which the server accepted the current\nconnection, or NULL if the current connection is via a Unix-domain socket.
[INITCAP]
declaration=text
category=String Functions
description=Converts the first letter of each word to upper case and the rest to lower\ncase. Words are sequences of alphanumeric characters separated by\nnon-alphanumeric characters.
[ISCLOSED]
declaration=path
category=Geometric Functions
description=Is path closed?
[ISEMPTY1]
name=ISEMPTY
declaration=anyrange
category=Range Functions
description=Is the range empty?
[ISEMPTY2]
name=ISEMPTY
declaration=anymultirange
category=Range Functions
description=Is the multirange empty?
[ISFINITE]
declaration=date
category=Date/Time Functions
description=Test for finite date (not +/-infinity)
[ISOPEN]
declaration=path
category=Geometric Functions
description=Is path open?
[JSON]
declaration=expression [ FORMAT JSON [ ENCODING UTF8 ]] [ { WITH | WITHOUT } UNIQUE [ KEYS ]]
category=JSON Functions
description=Converts a given expression specified as text or bytea string (in UTF8\nencoding) into a JSON value. If expression is NULL, an SQL null value is\nreturned. If WITH UNIQUE is specified, the expression must not contain any\nduplicate object keys.
[JSONB_AGG]
declaration=anyelement ORDER BY input_sort_columns
category=Aggregate Functions
description=Collects all the input values, including nulls, into a JSON array. Values\nare converted to JSON as per to_json or to_jsonb.
[JSONB_AGG_STRICT]
declaration=anyelement
category=Aggregate Functions
description=Collects all the input values, skipping nulls, into a JSON array. Values\nare converted to JSON as per to_json or to_jsonb.
[JSONB_ARRAY_ELEMENTS]
declaration=jsonb
category=JSON Functions
description=Expands the top-level JSON array into a set of JSON values.
[JSONB_ARRAY_ELEMENTS_TEXT]
declaration=jsonb
category=JSON Functions
description=Expands the top-level JSON array into a set of text values.
[JSONB_ARRAY_LENGTH]
declaration=jsonb
category=JSON Functions
description=Returns the number of elements in the top-level JSON array.
[JSONB_BUILD_ARRAY]
declaration=VARIADIC "any"
category=JSON Functions
description=Builds a possibly-heterogeneously-typed JSON array out of a variadic\nargument list. Each argument is converted as per to_json or to_jsonb.
[JSONB_BUILD_OBJECT]
declaration=VARIADIC "any"
category=JSON Functions
description=Builds a JSON object out of a variadic argument list. By convention, the\nargument list consists of alternating keys and values. Key arguments are\ncoerced to text; value arguments are converted as per to_json or to_jsonb.
[JSONB_EACH]
declaration=jsonb
category=JSON Functions
description=Expands the top-level JSON object into a set of key/value pairs.
[JSONB_EACH_TEXT]
declaration=jsonb
category=JSON Functions
description=Expands the top-level JSON object into a set of key/value pairs. The\nreturned values will be of type text.
[JSONB_EXTRACT_PATH]
declaration=from_json jsonb, VARIADIC path_elems text[]
category=JSON Functions
description=Extracts JSON sub-object at the specified path. (This is functionally\nequivalent to the #> operator, but writing the path out as a variadic\nlist can be more convenient in some cases.)
[JSONB_EXTRACT_PATH_TEXT]
declaration=from_json jsonb, VARIADIC path_elems text[]
category=JSON Functions
description=Extracts JSON sub-object at the specified path as text. (This is\nfunctionally equivalent to the #>> operator.)
[JSONB_INSERT]
declaration=target jsonb, path text[], new_value jsonb [, insert_after boolean ]
category=JSON Functions
description=Returns target with new_value inserted. If the item designated by the path\nis an array element, new_value will be inserted before that item if\ninsert_after is false (which is the default), or after it if insert_after\nis true. If the item designated by the path is an object field, new_value\nwill be inserted only if the object does not already contain that key. All\nearlier steps in the path must exist, or the target is returned unchanged.\nAs with the path oriented operators, negative integers that appear in the\npath count from the end of JSON arrays. If the last path step is an array\nindex that is out of range, the new value is added at the beginning of the\narray if the index is negative, or at the end of the array if it is\npositive.
[JSONB_OBJECT]
declaration=text[]
category=JSON Functions
description=Builds a JSON object out of a text array. The array must have either\nexactly one dimension with an even number of members, in which case they\nare taken as alternating key/value pairs, or two dimensions such that each\ninner array has exactly two elements, which are taken as a key/value pair.\nAll values are converted to JSON strings.
[JSONB_OBJECT_AGG]
declaration=key "any", value "any" ORDER BY input_sort_columns
category=Aggregate Functions
description=Collects all the key/value pairs into a JSON object. Key arguments are\ncoerced to text; value arguments are converted as per to_json or to_jsonb.\nValues can be null, but keys cannot.
[JSONB_OBJECT_AGG_STRICT]
declaration=key "any", value "any"
category=Aggregate Functions
description=Collects all the key/value pairs into a JSON object. Key arguments are\ncoerced to text; value arguments are converted as per to_json or to_jsonb.\nThe key can not be null. If the value is null then the entry is skipped,
[JSONB_OBJECT_AGG_UNIQUE]
declaration=key "any", value "any"
category=Aggregate Functions
description=Collects all the key/value pairs into a JSON object. Key arguments are\ncoerced to text; value arguments are converted as per to_json or to_jsonb.\nValues can be null, but keys cannot. If there is a duplicate key an error\nis thrown.
[JSONB_OBJECT_AGG_UNIQUE_STRICT]
declaration=key "any", value "any"
category=Aggregate Functions
description=Collects all the key/value pairs into a JSON object. Key arguments are\ncoerced to text; value arguments are converted as per to_json or to_jsonb.\nThe key can not be null. If the value is null then the entry is skipped. If\nthere is a duplicate key an error is thrown.
[JSONB_OBJECT_KEYS]
declaration=jsonb
category=JSON Functions
description=Returns the set of keys in the top-level JSON object.
[JSONB_PATH_EXISTS]
declaration=target jsonb, path jsonpath [, vars jsonb [, silent boolean ]]
category=JSON Functions
description=Checks whether the JSON path returns any item for the specified JSON value.\n(This is useful only with SQL-standard JSON path expressions, not predicate\ncheck expressions, since those always return a value.) If the vars argument\nis specified, it must be a JSON object, and its fields provide named values\nto be substituted into the jsonpath expression. If the silent argument is\nspecified and is true, the function suppresses the same errors as the @?\nand @@ operators do.
[JSONB_PATH_MATCH]
declaration=target jsonb, path jsonpath [, vars jsonb [, silent boolean ]]
category=JSON Functions
description=Returns the result of a JSON path predicate check for the specified JSON\nvalue. (This is useful only with predicate check expressions, not\nSQL-standard JSON path expressions, since it will either fail or return\nNULL if the path result is not a single boolean value.) The optional vars\nand silent arguments act the same as for jsonb_path_exists.
[JSONB_PATH_QUERY]
declaration=target jsonb, path jsonpath [, vars jsonb [, silent boolean ]]
category=JSON Functions
description=Returns all JSON items returned by the JSON path for the specified JSON\nvalue. For SQL-standard JSON path expressions it returns the JSON values\nselected from target. For predicate check expressions it returns the result\nof the predicate check: true, false, or null. The optional vars and silent\narguments act the same as for jsonb_path_exists.
[JSONB_PATH_QUERY_ARRAY]
declaration=target jsonb, path jsonpath [, vars jsonb [, silent boolean ]]
category=JSON Functions
description=Returns all JSON items returned by the JSON path for the specified JSON\nvalue, as a JSON array. The parameters are the same as for\njsonb_path_query.
[JSONB_PATH_QUERY_FIRST]
declaration=target jsonb, path jsonpath [, vars jsonb [, silent boolean ]]
category=JSON Functions
description=Returns the first JSON item returned by the JSON path for the specified\nJSON value, or NULL if there are no results. The parameters are the same as\nfor jsonb_path_query.
[JSONB_PATH_QUERY_FIRST_TZ]
declaration=target jsonb, path jsonpath [, vars jsonb [, silent boolean ]]
category=JSON Functions
description=These functions act like their counterparts described above without the _tz\nsuffix, except that these functions support comparisons of date/time values\nthat require timezone-aware conversions. The example below requires\ninterpretation of the date-only value 2015-08-02 as a timestamp with time\nzone, so the result depends on the current TimeZone setting. Due to this\ndependency, these functions are marked as stable, which means these\nfunctions cannot be used in indexes. Their counterparts are immutable, and\nso can be used in indexes; but they will throw errors if asked to make such\ncomparisons.
[JSONB_POPULATE_RECORD]
declaration=base anyelement, from_json jsonb
category=JSON Functions
description=Expands the top-level JSON object to a row having the composite type of the\nbase argument. The JSON object is scanned for fields whose names match\ncolumn names of the output row type, and their values are inserted into\nthose columns of the output. (Fields that do not correspond to any output\ncolumn name are ignored.) In typical use, the value of base is just NULL,\nwhich means that any output columns that do not match any object field will\nbe filled with nulls. However, if base isn't NULL then the values it\ncontains will be used for unmatched columns.
[JSONB_POPULATE_RECORDSET]
declaration=base anyelement, from_json jsonb
category=JSON Functions
description=Expands the top-level JSON array of objects to a set of rows having the\ncomposite type of the base argument. Each element of the JSON array is\nprocessed as described above for json[b]_populate_record.
[JSONB_POPULATE_RECORD_VALID]
declaration=base anyelement, from_json json
category=JSON Functions
description=Function for testing jsonb_populate_record. Returns true if the input\njsonb_populate_record would finish without an error for the given input\nJSON object; that is, it's valid input, false otherwise.
[JSONB_PRETTY]
declaration=jsonb
category=JSON Functions
description=Converts the given JSON value to pretty-printed, indented text.
[JSONB_SET]
declaration=target jsonb, path text[], new_value jsonb [, create_if_missing boolean ]
category=JSON Functions
description=Returns target with the item designated by path replaced by new_value, or\nwith new_value added if create_if_missing is true (which is the default)\nand the item designated by path does not exist. All earlier steps in the\npath must exist, or the target is returned unchanged. As with the path\noriented operators, negative integers that appear in the path count from\nthe end of JSON arrays. If the last path step is an array index that is out\nof range, and create_if_missing is true, the new value is added at the\nbeginning of the array if the index is negative, or at the end of the array\nif it is positive.
[JSONB_SET_LAX]
declaration=target jsonb, path text[], new_value jsonb [, create_if_missing boolean [, null_value_treatment text ]]
category=JSON Functions
description=If new_value is not NULL, behaves identically to jsonb_set. Otherwise\nbehaves according to the value of null_value_treatment which must be one of\n'raise_exception', 'use_json_null', 'delete_key', or 'return_target'. The\ndefault is 'use_json_null'.
[JSONB_STRIP_NULLS]
declaration=jsonb
category=JSON Functions
description=Deletes all object fields that have null values from the given JSON value,\nrecursively. Null values that are not object fields are untouched.
[JSONB_TO_RECORD]
declaration=jsonb
category=JSON Functions
description=Expands the top-level JSON object to a row having the composite type\ndefined by an AS clause. (As with all functions returning record, the\ncalling query must explicitly define the structure of the record with an AS\nclause.) The output record is filled from fields of the JSON object, in the\nsame way as described above for json[b]_populate_record. Since there is no\ninput record value, unmatched columns are always filled with nulls.
[JSONB_TO_RECORDSET]
declaration=jsonb
category=JSON Functions
description=Expands the top-level JSON array of objects to a set of rows having the\ncomposite type defined by an AS clause. (As with all functions returning\nrecord, the calling query must explicitly define the structure of the\nrecord with an AS clause.) Each element of the JSON array is processed as\ndescribed above for json[b]_populate_record.
[JSONB_TO_TSVECTOR]
declaration=[ config regconfig, ] document jsonb, filter jsonb
category=Text Search Functions
description=Selects each item in the JSON document that is requested by the filter and\nconverts each one to a tsvector, normalizing words according to the\nspecified or default configuration. The results are then concatenated in\ndocument order to produce the output. Position information is generated as\nthough one stopword exists between each pair of selected items. (Beware\nthat "document order" of the fields of a JSON object is\nimplementation-dependent when the input is jsonb.) The filter must be a\njsonb array containing zero or more of these keywords: "string" (to include\nall string values), "numeric" (to include all numeric values), "boolean"\n(to include all boolean values), "key" (to include all keys), or "all" (to\ninclude all the above). As a special case, the filter can also be a simple\nJSON value that is one of these keywords.
[JSONB_TYPEOF]
declaration=jsonb
category=JSON Functions
description=Returns the type of the top-level JSON value as a text string. Possible\ntypes are object, array, string, number, boolean, and null. (The null\nresult should not be confused with an SQL NULL; see the examples.)
[JSON_ARRAYAGG]
declaration=[ value_expression ] [ ORDER BY sort_expression ] [ { NULL | ABSENT } ON NULL ] [ RETURNING data_type [ FORMAT JSON [ ENCODING UTF8 ] ] ]
category=Aggregate Functions
description=Behaves in the same way as json_array but as an aggregate function so it\nonly takes one value_expression parameter. If ABSENT ON NULL is specified,\nany NULL values are omitted. If ORDER BY is specified, the elements will\nappear in the array in that order rather than in the input order.
[JSON_OBJECT]
declaration=[ { key_expression { VALUE | ':' } value_expression [ FORMAT JSON [ ENCODING UTF8 ] ] }[, ...] ] [ { NULL | ABSENT } ON NULL ] [ { WITH | WITHOUT } UNIQUE [ KEYS ] ] [ RETURNING data_type [ FORMAT JSON [ ENCODING UTF8 ] ] ]
category=JSON Functions
description=Constructs a JSON object of all the key/value pairs given, or an empty\nobject if none are given. key_expression is a scalar expression defining\nthe JSON key, which is converted to the text type. It cannot be NULL nor\ncan it belong to a type that has a cast to the json type. If WITH UNIQUE\nKEYS is specified, there must not be any duplicate key_expression. Any pair\nfor which the value_expression evaluates to NULL is omitted from the output\nif ABSENT ON NULL is specified; if NULL ON NULL is specified or the clause\nomitted, the key is included with value NULL.
[JSON_OBJECTAGG]
declaration=[ { key_expression { VALUE | ':' } value_expression } ] [ { NULL | ABSENT } ON NULL ] [ { WITH | WITHOUT } UNIQUE [ KEYS ] ] [ RETURNING data_type [ FORMAT JSON [ ENCODING UTF8 ] ] ]
category=Aggregate Functions
description=Behaves like json_object, but as an aggregate function, so it only takes\none key_expression and one value_expression parameter.
[JSON_SCALAR]
declaration=expression
category=JSON Functions
description=Converts a given SQL scalar value into a JSON scalar value. If the input is\nNULL, an SQL null is returned. If the input is number or a boolean value, a\ncorresponding JSON number or boolean value is returned. For any other\nvalue, a JSON string is returned.
[JUSTIFY_DAYS]
declaration=interval
category=Date/Time Functions
description=Adjust interval, converting 30-day time periods to months
[JUSTIFY_HOURS]
declaration=interval
category=Date/Time Functions
description=Adjust interval, converting 24-hour time periods to days
[JUSTIFY_INTERVAL]
declaration=interval
category=Date/Time Functions
description=Adjust interval using justify_days and justify_hours, with additional sign\nadjustments
[LAG]
declaration=value anycompatible [, offset integer [, default anycompatible ]]
category=Window Functions
description=Returns value evaluated at the row that is offset rows before the current\nrow within the partition; if there is no such row, instead returns default\n(which must be of a type compatible with value). Both offset and default\nare evaluated with respect to the current row. If omitted, offset defaults\nto 1 and default to NULL.
[LASTVAL]
declaration=
category=Sequence Manipulation Functions
description=Returns the value most recently returned by nextval in the current session.\nThis function is identical to currval, except that instead of taking the\nsequence name as an argument it refers to whichever sequence nextval was\nmost recently applied to in the current session. It is an error to call\nlastval if nextval has not yet been called in the current session.
[LAST_VALUE]
declaration=value anyelement
category=Window Functions
description=Returns value evaluated at the row that is the last row of the window\nframe.
[LCM]
declaration=numeric_type, numeric_type
category=Numeric/Math Functions
description=Least common multiple (the smallest strictly positive number that is an\nintegral multiple of both inputs); returns 0 if either input is zero;\navailable for integer, bigint, and numeric
[LEAD]
declaration=value anycompatible [, offset integer [, default anycompatible ]]
category=Window Functions
description=Returns value evaluated at the row that is offset rows after the current\nrow within the partition; if there is no such row, instead returns default\n(which must be of a type compatible with value). Both offset and default\nare evaluated with respect to the current row. If omitted, offset defaults\nto 1 and default to NULL.
[LEFT]
declaration=string text, n integer
category=String Functions
description=Returns first n characters in the string, or when n is negative, returns\nall but last |n| characters.
[LENGTH1]
name=LENGTH
declaration=text
category=String Functions
description=Returns the number of characters in the string.
[LENGTH2]
name=LENGTH
declaration=geometric_type
category=Geometric Functions
description=Computes the total length. Available for lseg, path.
[LENGTH3]
name=LENGTH
declaration=tsvector
category=Text Search Functions
description=Returns the number of lexemes in the tsvector.
[LINE]
declaration=point, point
category=Geometric Functions
description=Converts two points to the line through them.
[LOWER1]
name=LOWER
declaration=text
category=String Functions
description=Converts the string to all lower case, according to the rules of the\ndatabase's locale.
[LOWER2]
name=LOWER
declaration=anyrange
category=Range Functions
description=Extracts the lower bound of the range (NULL if the range is empty or has no\nlower bound).
[LOWER3]
name=LOWER
declaration=anymultirange
category=Range Functions
description=Extracts the lower bound of the multirange (NULL if the multirange is empty\nhas no lower bound).
[LOWER_INC1]
name=LOWER_INC
declaration=anyrange
category=Range Functions
description=Is the range's lower bound inclusive?
[LOWER_INC2]
name=LOWER_INC
declaration=anymultirange
category=Range Functions
description=Is the multirange's lower bound inclusive?
[LOWER_INF1]
name=LOWER_INF
declaration=anyrange
category=Range Functions
description=Does the range have no lower bound? (A lower bound of -Infinity returns\nfalse.)
[LOWER_INF2]
name=LOWER_INF
declaration=anymultirange
category=Range Functions
description=Does the multirange have no lower bound? (A lower bound of -Infinity\nreturns false.)
[LPAD]
declaration=string text, length integer [, fill text ]
category=String Functions
description=Extends the string to length length by prepending the characters fill (a\nspace by default). If the string is already longer than length then it is\ntruncated (on the right).
[LSEG]
declaration=box
category=Geometric Functions
description=Extracts box's diagonal as a line segment.
[LTRIM1]
name=LTRIM
declaration=string text [, characters text ]
category=String Functions
description=Removes the longest string containing only characters in characters (a\nspace by default) from the start of string.
[LTRIM2]
name=LTRIM
declaration=bytes bytea, bytesremoved bytea
category=Binary String Functions
description=Removes the longest string containing only bytes appearing in bytesremoved\nfrom the start of bytes.
[MACADDR8_SET7BIT]
declaration=macaddr8
category=Network Address Functions
description=Sets the 7th bit of the address to one, creating what is known as modified\nEUI-64, for inclusion in an IPv6 address.
[MAKEACLITEM]
declaration=grantee oid, grantor oid, privileges text, is_grantable boolean
category=Session Information Functions
description=Constructs an aclitem with the given properties. privileges is a\ncomma-separated list of privilege names such as SELECT, INSERT, etc, all of\nwhich are set in the result. (Case of the privilege string is not\nsignificant, and extra whitespace is allowed between but not within\nprivilege names.)
[MAKE_DATE]
declaration=year int, month int, day int
category=Date/Time Functions
description=Create date from year, month and day fields (negative years signify BC)
[MAKE_INTERVAL]
declaration=[ years int [, months int [, weeks int [, days int [, hours int [, mins int [, secs double precision ]]]]]]]
category=Date/Time Functions
description=Create interval from years, months, weeks, days, hours, minutes and seconds\nfields, each of which can default to zero
[MAKE_TIME]
declaration=hour int, min int, sec double precision
category=Date/Time Functions
description=Create time from hour, minute and seconds fields
[MAKE_TIMESTAMP]
declaration=year int, month int, day int, hour int, min int, sec double precision
category=Date/Time Functions
description=Create timestamp from year, month, day, hour, minute and seconds fields\n(negative years signify BC)
[MAKE_TIMESTAMPTZ]
declaration=year int, month int, day int, hour int, min int, sec double precision [, timezone text ]
category=Date/Time Functions
description=Create timestamp with time zone from year, month, day, hour, minute and\nseconds fields (negative years signify BC). If timezone is not specified,\nthe current time zone is used; the examples assume the session time zone is\nEurope/London
[MASKLEN]
declaration=inet
category=Network Address Functions
description=Returns the netmask length in bits.
[MAX]
declaration=see text
category=Aggregate Functions
description=Computes the maximum of the non-null input values. Available for any\nnumeric, string, date/time, or enum type, as well as inet, interval, money,\noid, pg_lsn, tid, xid8, and arrays of any of these types.
[MD51]
name=MD5
declaration=text
category=String Functions
description=Computes the MD5 hash of the argument, with the result written in\nhexadecimal.
[MD52]
name=MD5
declaration=bytea
category=Binary String Functions
description=Computes the MD5 hash of the binary string, with the result written in\nhexadecimal.
[MERGE_ACTION]
declaration=
category=Merge Support Functions
description=Returns the merge action command executed for the current row. This will be\n'INSERT', 'UPDATE', or 'DELETE'.
[MIN]
declaration=see text
category=Aggregate Functions
description=Computes the minimum of the non-null input values. Available for any\nnumeric, string, date/time, or enum type, as well as inet, interval, money,\noid, pg_lsn, tid, xid8, and arrays of any of these types.
[MIN_SCALE]
declaration=numeric
category=Numeric/Math Functions
description=Minimum scale (number of fractional decimal digits) needed to represent the\nsupplied value precisely
[MOD]
declaration=y numeric_type, x numeric_type
category=Numeric/Math Functions
description=Remainder of y/x; available for smallint, integer, bigint, and numeric
[MODE]
declaration=
category=Aggregate Functions
description=Computes the mode, the most frequent value of the aggregated argument\n(arbitrarily choosing the first one if there are multiple equally-frequent\nvalues). The aggregated argument must be of a sortable type.
[MULTIRANGE]
declaration=anyrange
category=Range Functions
description=Returns a multirange containing just the given range.
[MXID_AGE]
declaration=xid
category=Session Information Functions
description=Returns the number of multixacts IDs between the supplied multixact ID and\nthe current multixacts counter.
[NETMASK]
declaration=inet
category=Network Address Functions
description=Computes the network mask for the address's network.
[NETWORK]
declaration=inet
category=Network Address Functions
description=Returns the network part of the address, zeroing out whatever is to the\nright of the netmask. (This is equivalent to casting the value to cidr.)
[NEXTVAL]
declaration=regclass
category=Sequence Manipulation Functions
description=Advances the sequence object to its next value and returns that value. This\nis done atomically: even if multiple sessions execute nextval concurrently,\neach will safely receive a distinct sequence value. If the sequence object\nhas been created with default parameters, successive nextval calls will\nreturn successive values beginning with 1. Other behaviors can be obtained\nby using appropriate parameters in the CREATE SEQUENCE command.
[NOW]
declaration=
category=Date/Time Functions
description=Current date and time (start of current transaction); see Section 9.9.5
[NPOINTS]
declaration=geometric_type
category=Geometric Functions
description=Returns the number of points. Available for path, polygon.
[NTH_VALUE]
declaration=value anyelement, n integer
category=Window Functions
description=Returns value evaluated at the row that is the n'th row of the window frame\n(counting from 1); returns NULL if there is no such row.
[NTILE]
declaration=num_buckets integer
category=Window Functions
description=Returns an integer ranging from 1 to the argument value, dividing the\npartition as equally as possible.
[NUMNODE]
declaration=tsquery
category=Text Search Functions
description=Returns the number of lexemes plus operators in the tsquery.
[OBJ_DESCRIPTION]
declaration=object oid, catalog name
category=Session Information Functions
description=Returns the comment for a database object specified by its OID and the name\nof the containing system catalog. For example, obj_description(123456,\n'pg_class') would retrieve the comment for the table with OID 123456.
[OCTET_LENGTH1]
name=OCTET_LENGTH
declaration=text
category=String Functions
description=Returns number of bytes in the string.
[OCTET_LENGTH2]
name=OCTET_LENGTH
declaration=character
category=String Functions
description=Returns number of bytes in the string. Since this version of the function\naccepts type character directly, it will not strip trailing spaces.
[OCTET_LENGTH3]
name=OCTET_LENGTH
declaration=bytea
category=Binary String Functions
description=Returns number of bytes in the binary string.
[OCTET_LENGTH4]
name=OCTET_LENGTH
declaration=bit
category=Bit String Functions
description=Returns number of bytes in the bit string.
[OVERLAY1]
name=OVERLAY
declaration=string text PLACING newsubstring text FROM start integer [ FOR count integer ]
category=String Functions
description=Replaces the substring of string that starts at the start'th character and\nextends for count characters with newsubstring. If count is omitted, it\ndefaults to the length of newsubstring.
[OVERLAY2]
name=OVERLAY
declaration=bytes bytea PLACING newsubstring bytea FROM start integer [ FOR count integer ]
category=Binary String Functions
description=Replaces the substring of bytes that starts at the start'th byte and\nextends for count bytes with newsubstring. If count is omitted, it defaults\nto the length of newsubstring.
[OVERLAY3]
name=OVERLAY
declaration=bits bit PLACING newsubstring bit FROM start integer [ FOR count integer ]
category=Bit String Functions
description=Replaces the substring of bits that starts at the start'th bit and extends\nfor count bits with newsubstring. If count is omitted, it defaults to the\nlength of newsubstring.
[PARSE_IDENT]
declaration=qualified_identifier text [, strict_mode boolean DEFAULT true ]
category=String Functions
description=Splits qualified_identifier into an array of identifiers, removing any\nquoting of individual identifiers. By default, extra characters after the\nlast identifier are considered an error; but if the second parameter is\nfalse, then such extra characters are ignored. (This behavior is useful for\nparsing names for objects like functions.) Note that this function does not\ntruncate over-length identifiers. If you want truncation you can cast the\nresult to name[].
[PATH]
declaration=polygon
category=Geometric Functions
description=Converts polygon to a closed path with the same list of points.
[PCLOSE]
declaration=path
category=Geometric Functions
description=Converts path to closed form.
[PERCENTILE_DISC]
declaration=fraction double precision
category=Aggregate Functions
description=Computes the discrete percentile, the first value within the ordered set of\naggregated argument values whose position in the ordering equals or exceeds\nthe specified fraction. The aggregated argument must be of a sortable type.
[PERCENT_RANK1]
name=PERCENT_RANK
declaration=args
category=Aggregate Functions
description=Computes the relative rank of the hypothetical row, that is (rank - 1) /\n(total rows - 1). The value thus ranges from 0 to 1 inclusive.
[PERCENT_RANK2]
name=PERCENT_RANK
declaration=
category=Window Functions
description=Returns the relative rank of the current row, that is (rank - 1) / (total\npartition rows - 1). The value thus ranges from 0 to 1 inclusive.
[PG_ADVISORY_UNLOCK_ALL]
declaration=
category=System Administration Functions
description=Releases all session-level advisory locks held by the current session.\n(This function is implicitly invoked at session end, even if the client\ndisconnects ungracefully.)
[PG_AVAILABLE_WAL_SUMMARIES]
declaration=
category=Session Information Functions
description=Returns information about the WAL summary files present in the data\ndirectory, under pg_wal/summaries. One row will be returned per WAL summary\nfile. Each file summarizes WAL on the indicated TLI within the indicated\nLSN range. This function might be useful to determine whether enough WAL\nsummaries are present on the server to take an incremental backup based on\nsome prior backup whose start LSN is known.
[PG_BACKEND_PID]
declaration=
category=Session Information Functions
description=Returns the process ID of the server process attached to the current\nsession.
[PG_BACKUP_START]
declaration=label text [, fast boolean ]
category=System Administration Functions
description=Prepares the server to begin an on-line backup. The only required parameter\nis an arbitrary user-defined label for the backup. (Typically this would be\nthe name under which the backup dump file will be stored.) If the optional\nsecond parameter is given as true, it specifies executing pg_backup_start\nas quickly as possible. This forces an immediate checkpoint which will\ncause a spike in I/O operations, slowing any concurrently executing\nqueries.
[PG_BACKUP_STOP]
declaration=[wait_for_archive boolean ]
category=System Administration Functions
description=Finishes performing an on-line backup. The desired contents of the backup\nlabel file and the tablespace map file are returned as part of the result\nof the function and must be written to files in the backup area. These\nfiles must not be written to the live data directory (doing so will cause\nPostgreSQL to fail to restart in the event of a crash).
[PG_BASETYPE]
declaration=regtype
category=Session Information Functions
description=Returns the OID of the base type of a domain identified by its type OID. If\nthe argument is the OID of a non-domain type, returns the argument as-is.\nReturns NULL if the argument is not a valid type OID. If there's a chain of\ndomain dependencies, it will recurse until finding the base type.
[PG_BLOCKING_PIDS]
declaration=integer
category=Session Information Functions
description=Returns an array of the process ID(s) of the sessions that are blocking the\nserver process with the specified process ID from acquiring a lock, or an\nempty array if there is no such server process or it is not blocked.
[PG_CANCEL_BACKEND]
declaration=pid integer
category=System Administration Functions
description=Cancels the current query of the session whose backend process has the\nspecified process ID. This is also allowed if the calling role is a member\nof the role whose backend is being canceled or the calling role has\nprivileges of pg_signal_backend, however only superusers can cancel\nsuperuser backends.
[PG_CHAR_TO_ENCODING]
declaration=encoding name
category=Session Information Functions
description=Converts the supplied encoding name into an integer representing the\ninternal identifier used in some system catalog tables. Returns -1 if an\nunknown encoding name is provided.
[PG_CLIENT_ENCODING]
declaration=
category=String Functions
description=Returns current client encoding name.
[PG_COLLATION_ACTUAL_VERSION]
declaration=oid
category=System Administration Functions
description=Returns the actual version of the collation object as it is currently\ninstalled in the operating system. If this is different from the value in\npg_collation.collversion, then objects depending on the collation might\nneed to be rebuilt. See also ALTER COLLATION.
[PG_COLLATION_IS_VISIBLE]
declaration=collation oid
category=Session Information Functions
description=Is collation visible in search path?
[PG_COLUMN_COMPRESSION]
declaration="any"
category=System Administration Functions
description=Shows the compression algorithm that was used to compress an individual\nvariable-length value. Returns NULL if the value is not compressed.
[PG_COLUMN_SIZE]
declaration="any"
category=System Administration Functions
description=Shows the number of bytes used to store any individual data value. If\napplied directly to a table column value, this reflects any compression\nthat was done.
[PG_COLUMN_TOAST_CHUNK_ID]
declaration="any"
category=System Administration Functions
description=Shows the chunk_id of an on-disk TOASTed value. Returns NULL if the value\nis un-TOASTed or not on-disk. See Section 65.2 for more information about\nTOAST.
[PG_CONF_LOAD_TIME]
declaration=
category=Session Information Functions
description=Returns the time when the server configuration files were last loaded. If\nthe current session was alive at the time, this will be the time when the\nsession itself re-read the configuration files (so the reading will vary a\nlittle in different sessions). Otherwise it is the time when the postmaster\nprocess re-read the configuration files.
[PG_CONTROL_CHECKPOINT]
declaration=
category=Session Information Functions
description=Returns information about current checkpoint state, as shown in Table 9.87.
[PG_CONTROL_INIT]
declaration=
category=Session Information Functions
description=Returns information about cluster initialization state, as shown in Table\n9.89.
[PG_CONTROL_RECOVERY]
declaration=
category=Session Information Functions
description=Returns information about recovery state, as shown in Table 9.90.
[PG_CONTROL_SYSTEM]
declaration=
category=Session Information Functions
description=Returns information about current control file state, as shown in Table\n9.88.
[PG_CONVERSION_IS_VISIBLE]
declaration=conversion oid
category=Session Information Functions
description=Is conversion visible in search path?
[PG_COPY_LOGICAL_REPLICATION_SLOT]
declaration=src_slot_name name, dst_slot_name name [, temporary boolean [, plugin name ]]
category=System Administration Functions
description=Copies an existing logical replication slot named src_slot_name to a\nlogical replication slot named dst_slot_name, optionally changing the\noutput plugin and persistence. The copied logical slot starts from the same\nLSN as the source logical slot. Both temporary and plugin are optional; if\nthey are omitted, the values of the source slot are used.
[PG_COPY_PHYSICAL_REPLICATION_SLOT]
declaration=src_slot_name name, dst_slot_name name [, temporary boolean ]
category=System Administration Functions
description=Copies an existing physical replication slot named src_slot_name to a\nphysical replication slot named dst_slot_name. The copied physical slot\nstarts to reserve WAL from the same LSN as the source slot. temporary is\noptional. If temporary is omitted, the same value as the source slot is\nused.
[PG_CREATE_LOGICAL_REPLICATION_SLOT]
declaration=slot_name name, plugin name [, temporary boolean, twophase boolean, failover boolean ]
category=System Administration Functions
description=Creates a new logical (decoding) replication slot named slot_name using the\noutput plugin plugin. The optional third parameter, temporary, when set to\ntrue, specifies that the slot should not be permanently stored to disk and\nis only meant for use by the current session. Temporary slots are also\nreleased upon any error. The optional fourth parameter, twophase, when set\nto true, specifies that the decoding of prepared transactions is enabled\nfor this slot. The optional fifth parameter, failover, when set to true,\nspecifies that this slot is enabled to be synced to the standbys so that\nlogical replication can be resumed after failover. A call to this function\nhas the same effect as the replication protocol command\nCREATE_REPLICATION_SLOT ... LOGICAL.
[PG_CREATE_PHYSICAL_REPLICATION_SLOT]
declaration=slot_name name [, immediately_reserve boolean, temporary boolean ]
category=System Administration Functions
description=Creates a new physical replication slot named slot_name. The optional\nsecond parameter, when true, specifies that the LSN for this replication\nslot be reserved immediately; otherwise the LSN is reserved on first\nconnection from a streaming replication client. Streaming changes from a\nphysical slot is only possible with the streaming-replication protocol -\nsee Section 53.4. The optional third parameter, temporary, when set to\ntrue, specifies that the slot should not be permanently stored to disk and\nis only meant for use by the current session. Temporary slots are also\nreleased upon any error. This function corresponds to the replication\nprotocol command CREATE_REPLICATION_SLOT ... PHYSICAL.
[PG_CREATE_RESTORE_POINT]
declaration=name text
category=System Administration Functions
description=Creates a named marker record in the write-ahead log that can later be used\nas a recovery target, and returns the corresponding write-ahead log\nlocation. The given name can then be used with recovery_target_name to\nspecify the point up to which recovery will proceed. Avoid creating\nmultiple restore points with the same name, since recovery will stop at the\nfirst one whose name matches the recovery target.
[PG_CURRENT_SNAPSHOT]
declaration=
category=Session Information Functions
description=Returns a current snapshot, a data structure showing which transaction IDs\nare now in-progress. Only top-level transaction IDs are included in the\nsnapshot; subtransaction IDs are not shown; see Section 66.3 for details.
[PG_CURRENT_WAL_FLUSH_LSN]
declaration=
category=System Administration Functions
description=Returns the current write-ahead log flush location (see notes below).
[PG_CURRENT_WAL_INSERT_LSN]
declaration=
category=System Administration Functions
description=Returns the current write-ahead log insert location (see notes below).
[PG_CURRENT_WAL_LSN]
declaration=
category=System Administration Functions
description=Returns the current write-ahead log write location (see notes below).
[PG_CURRENT_XACT_ID]
declaration=
category=Session Information Functions
description=Returns the current transaction's ID. It will assign a new one if the\ncurrent transaction does not have one already (because it has not performed\nany database updates); see Section 66.1 for details. If executed in a\nsubtransaction, this will return the top-level transaction ID; see Section\n66.3 for details.
[PG_CURRENT_XACT_ID_IF_ASSIGNED]
declaration=
category=Session Information Functions
description=Returns the current transaction's ID, or NULL if no ID is assigned yet.\n(It's best to use this variant if the transaction might otherwise be\nread-only, to avoid unnecessary consumption of an XID.) If executed in a\nsubtransaction, this will return the top-level transaction ID.
[PG_DATABASE_COLLATION_ACTUAL_VERSION]
declaration=oid
category=System Administration Functions
description=Returns the actual version of the database's collation as it is currently\ninstalled in the operating system. If this is different from the value in\npg_database.datcollversion, then objects depending on the collation might\nneed to be rebuilt. See also ALTER DATABASE.
[PG_DESCRIBE_OBJECT]
declaration=classid oid, objid oid, objsubid integer
category=Session Information Functions
description=Returns a textual description of a database object identified by catalog\nOID, object OID, and sub-object ID (such as a column number within a table;\nthe sub-object ID is zero when referring to a whole object). This\ndescription is intended to be human-readable, and might be translated,\ndepending on server configuration. This is especially useful to determine\nthe identity of an object referenced in the pg_depend catalog. This\nfunction returns NULL values for undefined objects.
[PG_DROP_REPLICATION_SLOT]
declaration=slot_name name
category=System Administration Functions
description=Drops the physical or logical replication slot named slot_name. Same as\nreplication protocol command DROP_REPLICATION_SLOT. For logical slots, this\nmust be called while connected to the same database the slot was created\non.
[PG_ENCODING_TO_CHAR]
declaration=encoding integer
category=Session Information Functions
description=Converts the integer used as the internal identifier of an encoding in some\nsystem catalog tables into a human-readable string. Returns an empty string\nif an invalid encoding number is provided.
[PG_EXPORT_SNAPSHOT]
declaration=
category=System Administration Functions
description=Saves the transaction's current snapshot and returns a text string\nidentifying the snapshot. This string must be passed (outside the database)\nto clients that want to import the snapshot. The snapshot is available for\nimport only until the end of the transaction that exported it.
[PG_FILENODE_RELATION]
declaration=tablespace oid, filenode oid
category=System Administration Functions
description=Returns a relation's OID given the tablespace OID and filenode it is stored\nunder. This is essentially the inverse mapping of pg_relation_filepath. For\na relation in the database's default tablespace, the tablespace can be\nspecified as zero. Returns NULL if no relation in the current database is\nassociated with the given values.
[PG_FUNCTION_IS_VISIBLE]
declaration=function oid
category=Session Information Functions
description=Is function visible in search path? (This also works for procedures and\naggregates.)
[PG_GET_CATALOG_FOREIGN_KEYS]
declaration=
category=Session Information Functions
description=Returns a set of records describing the foreign key relationships that\nexist within the PostgreSQL system catalogs. The fktable column contains\nthe name of the referencing catalog, and the fkcols column contains the\nname(s) of the referencing column(s). Similarly, the pktable column\ncontains the name of the referenced catalog, and the pkcols column contains\nthe name(s) of the referenced column(s). If is_array is true, the last\nreferencing column is an array, each of whose elements should match some\nentry in the referenced catalog. If is_opt is true, the referencing\ncolumn(s) are allowed to contain zeroes instead of a valid reference.
[PG_GET_CONSTRAINTDEF]
declaration=constraint oid [, pretty boolean ]
category=Session Information Functions
description=Reconstructs the creating command for a constraint. (This is a decompiled\nreconstruction, not the original text of the command.)
[PG_GET_EXPR]
declaration=expr pg_node_tree, relation oid [, pretty boolean ]
category=Session Information Functions
description=Decompiles the internal form of an expression stored in the system\ncatalogs, such as the default value for a column. If the expression might\ncontain Vars, specify the OID of the relation they refer to as the second\nparameter; if no Vars are expected, passing zero is sufficient.
[PG_GET_FUNCTIONDEF]
declaration=func oid
category=Session Information Functions
description=Reconstructs the creating command for a function or procedure. (This is a\ndecompiled reconstruction, not the original text of the command.) The\nresult is a complete CREATE OR REPLACE FUNCTION or CREATE OR REPLACE\nPROCEDURE statement.
[PG_GET_FUNCTION_ARGUMENTS]
declaration=func oid
category=Session Information Functions
description=Reconstructs the argument list of a function or procedure, in the form it\nwould need to appear in within CREATE FUNCTION (including default values).
[PG_GET_FUNCTION_IDENTITY_ARGUMENTS]
declaration=func oid
category=Session Information Functions
description=Reconstructs the argument list necessary to identify a function or\nprocedure, in the form it would need to appear in within commands such as\nALTER FUNCTION. This form omits default values.
[PG_GET_FUNCTION_RESULT]
declaration=func oid
category=Session Information Functions
description=Reconstructs the RETURNS clause of a function, in the form it would need to\nappear in within CREATE FUNCTION. Returns NULL for a procedure.
[PG_GET_INDEXDEF]
declaration=index oid [, column integer, pretty boolean ]
category=Session Information Functions
description=Reconstructs the creating command for an index. (This is a decompiled\nreconstruction, not the original text of the command.) If column is\nsupplied and is not zero, only the definition of that column is\nreconstructed.
[PG_GET_KEYWORDS]
declaration=
category=Session Information Functions
description=Returns a set of records describing the SQL keywords recognized by the\nserver. The word column contains the keyword. The catcode column contains a\ncategory code: U for an unreserved keyword, C for a keyword that can be a\ncolumn name, T for a keyword that can be a type or function name, or R for\na fully reserved keyword. The barelabel column contains true if the keyword\ncan be used as a "bare" column label in SELECT lists, or false if it can\nonly be used after AS. The catdesc column contains a possibly-localized\nstring describing the keyword's category. The baredesc column contains a\npossibly-localized string describing the keyword's column label status.
[PG_GET_OBJECT_ADDRESS]
declaration=type text, object_names text[], object_args text[]
category=Session Information Functions
description=Returns a row containing enough information to uniquely identify the\ndatabase object specified by a type code and object name and argument\narrays. The returned values are the ones that would be used in system\ncatalogs such as pg_depend; they can be passed to other system functions\nsuch as pg_describe_object or pg_identify_object. classid is the OID of the\nsystem catalog containing the object; objid is the OID of the object\nitself, and objsubid is the sub-object ID, or zero if none. This function\nis the inverse of pg_identify_object_as_address. Undefined objects are\nidentified with NULL values.
[PG_GET_PARTKEYDEF]
declaration=table oid
category=Session Information Functions
description=Reconstructs the definition of a partitioned table's partition key, in the\nform it would have in the PARTITION BY clause of CREATE TABLE. (This is a\ndecompiled reconstruction, not the original text of the command.)
[PG_GET_RULEDEF]
declaration=rule oid [, pretty boolean ]
category=Session Information Functions
description=Reconstructs the creating command for a rule. (This is a decompiled\nreconstruction, not the original text of the command.)
[PG_GET_SERIAL_SEQUENCE]
declaration=table text, column text
category=Session Information Functions
description=Returns the name of the sequence associated with a column, or NULL if no\nsequence is associated with the column. If the column is an identity\ncolumn, the associated sequence is the sequence internally created for that\ncolumn. For columns created using one of the serial types (serial,\nsmallserial, bigserial), it is the sequence created for that serial column\ndefinition. In the latter case, the association can be modified or removed\nwith ALTER SEQUENCE OWNED BY. (This function probably should have been\ncalled pg_get_owned_sequence; its current name reflects the fact that it\nhas historically been used with serial-type columns.) The first parameter\nis a table name with optional schema, and the second parameter is a column\nname. Because the first parameter potentially contains both schema and\ntable names, it is parsed per usual SQL rules, meaning it is lower-cased by\ndefault. The second parameter, being just a column name, is treated\nliterally and so has its case preserved. The result is suitably formatted\nfor passing to the sequence functions (see Section 9.17).
[PG_GET_STATISTICSOBJDEF]
declaration=statobj oid
category=Session Information Functions
description=Reconstructs the creating command for an extended statistics object. (This\nis a decompiled reconstruction, not the original text of the command.)
[PG_GET_TRIGGERDEF]
declaration=trigger oid [, pretty boolean ]
category=Session Information Functions
description=Reconstructs the creating command for a trigger. (This is a decompiled\nreconstruction, not the original text of the command.)
[PG_GET_USERBYID]
declaration=role oid
category=Session Information Functions
description=Returns a role's name given its OID.
[PG_GET_VIEWDEF]
declaration=view oid [, pretty boolean ]
category=Session Information Functions
description=Reconstructs the underlying SELECT command for a view or materialized view.\n(This is a decompiled reconstruction, not the original text of the\ncommand.)
[PG_GET_WAL_REPLAY_PAUSE_STATE]
declaration=
category=System Administration Functions
description=Returns recovery pause state. The return values are not paused if pause is\nnot requested, pause requested if pause is requested but recovery is not\nyet paused, and paused if the recovery is actually paused.
[PG_GET_WAL_RESOURCE_MANAGERS]
declaration=
category=System Administration Functions
description=Returns the currently-loaded WAL resource managers in the system. The\ncolumn rm_builtin indicates whether it's a built-in resource manager, or a\ncustom resource manager loaded by an extension.
[PG_GET_WAL_SUMMARIZER_STATE]
declaration=
category=Session Information Functions
description=Returns information about the progress of the WAL summarizer. If the WAL\nsummarizer has never run since the instance was started, then\nsummarized_tli and summarized_lsn will be 0 and 0/0 respectively;\notherwise, they will be the TLI and ending LSN of the last WAL summary file\nwritten to disk. If the WAL summarizer is currently running, pending_lsn\nwill be the ending LSN of the last record that it has consumed, which must\nalways be greater than or equal to summarized_lsn; if the WAL summarizer is\nnot running, it will be equal to summarized_lsn. summarizer_pid is the PID\nof the WAL summarizer process, if it is running, and otherwise NULL.
[PG_HAS_ROLE]
declaration=[ user name or oid, ] role text or oid, privilege text
category=Session Information Functions
description=Does user have privilege for role? Allowable privilege types are MEMBER,\nUSAGE, and SET. MEMBER denotes direct or indirect membership in the role\nwithout regard to what specific privileges may be conferred. USAGE denotes\nwhether the privileges of the role are immediately available without doing\nSET ROLE, while SET denotes whether it is possible to change to the role\nusing the SET ROLE command. WITH ADMIN OPTION or WITH GRANT OPTION can be\nadded to any of these privilege types to test whether the ADMIN privilege\nis held (all six spellings test the same thing). This function does not\nallow the special case of setting user to public, because the PUBLIC\npseudo-role can never be a member of real roles.
[PG_IDENTIFY_OBJECT]
declaration=classid oid, objid oid, objsubid integer
category=Session Information Functions
description=Returns a row containing enough information to uniquely identify the\ndatabase object specified by catalog OID, object OID and sub-object ID.\nThis information is intended to be machine-readable, and is never\ntranslated. type identifies the type of database object; schema is the\nschema name that the object belongs in, or NULL for object types that do\nnot belong to schemas; name is the name of the object, quoted if necessary,\nif the name (along with schema name, if pertinent) is sufficient to\nuniquely identify the object, otherwise NULL; identity is the complete\nobject identity, with the precise format depending on object type, and each\nname within the format being schema-qualified and quoted as necessary.\nUndefined objects are identified with NULL values.
[PG_IDENTIFY_OBJECT_AS_ADDRESS]
declaration=classid oid, objid oid, objsubid integer
category=Session Information Functions
description=Returns a row containing enough information to uniquely identify the\ndatabase object specified by catalog OID, object OID and sub-object ID. The\nreturned information is independent of the current server, that is, it\ncould be used to identify an identically named object in another server.\ntype identifies the type of database object; object_names and object_args\nare text arrays that together form a reference to the object. These three\nvalues can be passed to pg_get_object_address to obtain the internal\naddress of the object.
[PG_IMPORT_SYSTEM_COLLATIONS]
declaration=schema regnamespace
category=System Administration Functions
description=Adds collations to the system catalog pg_collation based on all the locales\nit finds in the operating system. This is what initdb uses; see Section\n23.2.2 for more details. If additional locales are installed into the\noperating system later on, this function can be run again to add collations\nfor the new locales. Locales that match existing entries in pg_collation\nwill be skipped. (But collation objects based on locales that are no longer\npresent in the operating system are not removed by this function.) The\nschema parameter would typically be pg_catalog, but that is not a\nrequirement; the collations could be installed into some other schema as\nwell. The function returns the number of new collation objects it created.\nUse of this function is restricted to superusers.
[PG_INDEXAM_HAS_PROPERTY]
declaration=am oid, property text
category=Session Information Functions
description=Tests whether an index access method has the named property. Access method\nproperties are listed in Table 9.77. NULL is returned if the property name\nis not known or does not apply to the particular object, or if the OID does\nnot identify a valid object.
[PG_INDEXES_SIZE]
declaration=regclass
category=System Administration Functions
description=Computes the total disk space used by indexes attached to the specified\ntable.
[PG_INDEX_COLUMN_HAS_PROPERTY]
declaration=index regclass, column integer, property text
category=Session Information Functions
description=Tests whether an index column has the named property. Common index column\nproperties are listed in Table 9.75. (Note that extension access methods\ncan define additional property names for their indexes.) NULL is returned\nif the property name is not known or does not apply to the particular\nobject, or if the OID or column number does not identify a valid object.
[PG_INDEX_HAS_PROPERTY]
declaration=index regclass, property text
category=Session Information Functions
description=Tests whether an index has the named property. Common index properties are\nlisted in Table 9.76. (Note that extension access methods can define\nadditional property names for their indexes.) NULL is returned if the\nproperty name is not known or does not apply to the particular object, or\nif the OID does not identify a valid object.
[PG_INPUT_ERROR_INFO]
declaration=string text, type text
category=Session Information Functions
description=Tests whether the given string is valid input for the specified data type;\nif not, return the details of the error that would have been thrown. If the\ninput is valid, the results are NULL. The inputs are the same as for\npg_input_is_valid.
[PG_INPUT_IS_VALID]
declaration=string text, type text
category=Session Information Functions
description=Tests whether the given string is valid input for the specified data type,\nreturning true or false.
[PG_IS_IN_RECOVERY]
declaration=
category=System Administration Functions
description=Returns true if recovery is still in progress.
[PG_IS_OTHER_TEMP_SCHEMA]
declaration=oid
category=Session Information Functions
description=Returns true if the given OID is the OID of another session's temporary\nschema. (This can be useful, for example, to exclude other sessions'\ntemporary tables from a catalog display.)
[PG_IS_WAL_REPLAY_PAUSED]
declaration=
category=System Administration Functions
description=Returns true if recovery pause is requested.
[PG_JIT_AVAILABLE]
declaration=
category=Session Information Functions
description=Returns true if a JIT compiler extension is available (see Chapter 30) and\nthe jit configuration parameter is set to on.
[PG_LAST_COMMITTED_XACT]
declaration=
category=Session Information Functions
description=Returns the transaction ID, commit timestamp and replication origin of the\nlatest committed transaction.
[PG_LAST_WAL_RECEIVE_LSN]
declaration=
category=System Administration Functions
description=Returns the last write-ahead log location that has been received and synced\nto disk by streaming replication. While streaming replication is in\nprogress this will increase monotonically. If recovery has completed then\nthis will remain static at the location of the last WAL record received and\nsynced to disk during recovery. If streaming replication is disabled, or if\nit has not yet started, the function returns NULL.
[PG_LAST_WAL_REPLAY_LSN]
declaration=
category=System Administration Functions
description=Returns the last write-ahead log location that has been replayed during\nrecovery. If recovery is still in progress this will increase\nmonotonically. If recovery has completed then this will remain static at\nthe location of the last WAL record applied during recovery. When the\nserver has been started normally without recovery, the function returns\nNULL.
[PG_LAST_XACT_REPLAY_TIMESTAMP]
declaration=
category=System Administration Functions
description=Returns the time stamp of the last transaction replayed during recovery.\nThis is the time at which the commit or abort WAL record for that\ntransaction was generated on the primary. If no transactions have been\nreplayed during recovery, the function returns NULL. Otherwise, if recovery\nis still in progress this will increase monotonically. If recovery has\ncompleted then this will remain static at the time of the last transaction\napplied during recovery. When the server has been started normally without\nrecovery, the function returns NULL.
[PG_LISTENING_CHANNELS]
declaration=
category=Session Information Functions
description=Returns the set of names of asynchronous notification channels that the\ncurrent session is listening to.
[PG_LOGICAL_SLOT_GET_BINARY_CHANGES]
declaration=slot_name name, upto_lsn pg_lsn, upto_nchanges integer, VARIADIC options text[]
category=System Administration Functions
description=Behaves just like the pg_logical_slot_get_changes() function, except that\nchanges are returned as bytea.
[PG_LOGICAL_SLOT_GET_CHANGES]
declaration=slot_name name, upto_lsn pg_lsn, upto_nchanges integer, VARIADIC options text[]
category=System Administration Functions
description=Returns changes in the slot slot_name, starting from the point from which\nchanges have been consumed last. If upto_lsn and upto_nchanges are NULL,\nlogical decoding will continue until end of WAL. If upto_lsn is non-NULL,\ndecoding will include only those transactions which commit prior to the\nspecified LSN. If upto_nchanges is non-NULL, decoding will stop when the\nnumber of rows produced by decoding exceeds the specified value. Note,\nhowever, that the actual number of rows returned may be larger, since this\nlimit is only checked after adding the rows produced when decoding each new\ntransaction commit. If the specified slot is a logical failover slot then\nthe function will not return until all physical slots specified in\nsynchronized_standby_slots have confirmed WAL receipt.
[PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES]
declaration=slot_name name, upto_lsn pg_lsn, upto_nchanges integer, VARIADIC options text[]
category=System Administration Functions
description=Behaves just like the pg_logical_slot_peek_changes() function, except that\nchanges are returned as bytea.
[PG_LOGICAL_SLOT_PEEK_CHANGES]
declaration=slot_name name, upto_lsn pg_lsn, upto_nchanges integer, VARIADIC options text[]
category=System Administration Functions
description=Behaves just like the pg_logical_slot_get_changes() function, except that\nchanges are not consumed; that is, they will be returned again on future\ncalls.
[PG_LOG_BACKEND_MEMORY_CONTEXTS]
declaration=pid integer
category=System Administration Functions
description=Requests to log the memory contexts of the backend with the specified\nprocess ID. This function can send the request to backends and auxiliary\nprocesses except logger. These memory contexts will be logged at LOG\nmessage level. They will appear in the server log based on the log\nconfiguration set (see Section 19.8 for more information), but will not be\nsent to the client regardless of client_min_messages.
[PG_LOG_STANDBY_SNAPSHOT]
declaration=
category=System Administration Functions
description=Take a snapshot of running transactions and write it to WAL, without having\nto wait for bgwriter or checkpointer to log one. This is useful for logical\ndecoding on standby, as logical slot creation has to wait until such a\nrecord is replayed on the standby.
[PG_LS_ARCHIVE_STATUSDIR]
declaration=
category=System Administration Functions
description=Returns the name, size, and last modification time (mtime) of each ordinary\nfile in the server's WAL archive status directory (pg_wal/archive_status).\nFilenames beginning with a dot, directories, and other special files are\nexcluded.
[PG_LS_DIR]
declaration=dirname text [, missing_ok boolean, include_dot_dirs boolean ]
category=System Administration Functions
description=Returns the names of all files (and directories and other special files) in\nthe specified directory. The include_dot_dirs parameter indicates whether\n"." and ".." are to be included in the result set; the default is to\nexclude them. Including them can be useful when missing_ok is true, to\ndistinguish an empty directory from a non-existent directory.
[PG_LS_LOGDIR]
declaration=
category=System Administration Functions
description=Returns the name, size, and last modification time (mtime) of each ordinary\nfile in the server's log directory. Filenames beginning with a dot,\ndirectories, and other special files are excluded.
[PG_LS_LOGICALMAPDIR]
declaration=
category=System Administration Functions
description=Returns the name, size, and last modification time (mtime) of each ordinary\nfile in the server's pg_logical/mappings directory. Filenames beginning\nwith a dot, directories, and other special files are excluded.
[PG_LS_LOGICALSNAPDIR]
declaration=
category=System Administration Functions
description=Returns the name, size, and last modification time (mtime) of each ordinary\nfile in the server's pg_logical/snapshots directory. Filenames beginning\nwith a dot, directories, and other special files are excluded.
[PG_LS_REPLSLOTDIR]
declaration=slot_name text
category=System Administration Functions
description=Returns the name, size, and last modification time (mtime) of each ordinary\nfile in the server's pg_replslot/slot_name directory, where slot_name is\nthe name of the replication slot provided as input of the function.\nFilenames beginning with a dot, directories, and other special files are\nexcluded.
[PG_LS_TMPDIR]
declaration=[ tablespace oid ]
category=System Administration Functions
description=Returns the name, size, and last modification time (mtime) of each ordinary\nfile in the temporary file directory for the specified tablespace. If\ntablespace is not provided, the pg_default tablespace is examined.\nFilenames beginning with a dot, directories, and other special files are\nexcluded.
[PG_LS_WALDIR]
declaration=
category=System Administration Functions
description=Returns the name, size, and last modification time (mtime) of each ordinary\nfile in the server's write-ahead log (WAL) directory. Filenames beginning\nwith a dot, directories, and other special files are excluded.
[PG_MY_TEMP_SCHEMA]
declaration=
category=Session Information Functions
description=Returns the OID of the current session's temporary schema, or zero if it\nhas none (because it has not created any temporary tables).
[PG_NOTIFICATION_QUEUE_USAGE]
declaration=
category=Session Information Functions
description=Returns the fraction (0–1) of the asynchronous notification queue's\nmaximum size that is currently occupied by notifications that are waiting\nto be processed. See LISTEN and NOTIFY for more information.
[PG_OPCLASS_IS_VISIBLE]
declaration=opclass oid
category=Session Information Functions
description=Is operator class visible in search path?
[PG_OPERATOR_IS_VISIBLE]
declaration=operator oid
category=Session Information Functions
description=Is operator visible in search path?
[PG_OPFAMILY_IS_VISIBLE]
declaration=opclass oid
category=Session Information Functions
description=Is operator family visible in search path?
[PG_OPTIONS_TO_TABLE]
declaration=options_array text[]
category=Session Information Functions
description=Returns the set of storage options represented by a value from\npg_class.reloptions or pg_attribute.attoptions.
[PG_PARTITION_ANCESTORS]
declaration=regclass
category=System Administration Functions
description=Lists the ancestor relations of the given partition, including the relation\nitself. Returns no rows if the relation does not exist or is not a\npartition or partitioned table.
[PG_PARTITION_ROOT]
declaration=regclass
category=System Administration Functions
description=Returns the top-most parent of the partition tree to which the given\nrelation belongs. Returns NULL if the relation does not exist or is not a\npartition or partitioned table.
[PG_PARTITION_TREE]
declaration=regclass
category=System Administration Functions
description=Lists the tables or indexes in the partition tree of the given partitioned\ntable or partitioned index, with one row for each partition. Information\nprovided includes the OID of the partition, the OID of its immediate\nparent, a boolean value telling if the partition is a leaf, and an integer\ntelling its level in the hierarchy. The level value is 0 for the input\ntable or index, 1 for its immediate child partitions, 2 for their\npartitions, and so on. Returns no rows if the relation does not exist or is\nnot a partition or partitioned table.
[PG_POSTMASTER_START_TIME]
declaration=
category=Session Information Functions
description=Returns the time when the server started.
[PG_PROMOTE]
declaration=wait boolean DEFAULT true, wait_seconds integer DEFAULT 60
category=System Administration Functions
description=Promotes a standby server to primary status. With wait set to true (the\ndefault), the function waits until promotion is completed or wait_seconds\nseconds have passed, and returns true if promotion is successful and false\notherwise. If wait is set to false, the function returns true immediately\nafter sending a SIGUSR1 signal to the postmaster to trigger promotion.
[PG_READ_BINARY_FILE]
declaration=filename text [, offset bigint, length bigint ] [, missing_ok boolean ]
category=System Administration Functions
description=Returns all or part of a file. This function is identical to pg_read_file\nexcept that it can read arbitrary binary data, returning the result as\nbytea not text; accordingly, no encoding checks are performed.
[PG_READ_FILE]
declaration=filename text [, offset bigint, length bigint ] [, missing_ok boolean ]
category=System Administration Functions
description=Returns all or part of a text file, starting at the given byte offset,\nreturning at most length bytes (less if the end of file is reached first).\nIf offset is negative, it is relative to the end of the file. If offset and\nlength are omitted, the entire file is returned. The bytes read from the\nfile are interpreted as a string in the database's encoding; an error is\nthrown if they are not valid in that encoding.
[PG_RELATION_FILENODE]
declaration=relation regclass
category=System Administration Functions
description=Returns the "filenode" number currently assigned to the specified relation.\nThe filenode is the base component of the file name(s) used for the\nrelation (see Section 65.1 for more information). For most relations the\nresult is the same as pg_class.relfilenode, but for certain system catalogs\nrelfilenode is zero and this function must be used to get the correct\nvalue. The function returns NULL if passed a relation that does not have\nstorage, such as a view.
[PG_RELATION_FILEPATH]
declaration=relation regclass
category=System Administration Functions
description=Returns the entire file path name (relative to the database cluster's data\ndirectory, PGDATA) of the relation.
[PG_RELATION_SIZE]
declaration=relation regclass [, fork text ]
category=System Administration Functions
description=Computes the disk space used by one "fork" of the specified relation. (Note\nthat for most purposes it is more convenient to use the higher-level\nfunctions pg_total_relation_size or pg_table_size, which sum the sizes of\nall forks.) With one argument, this returns the size of the main data fork\nof the relation. The second argument can be provided to specify which fork\nto examine:
[PG_RELOAD_CONF]
declaration=
category=System Administration Functions
description=Causes all processes of the PostgreSQL server to reload their configuration\nfiles. (This is initiated by sending a SIGHUP signal to the postmaster\nprocess, which in turn sends SIGHUP to each of its children.) You can use\nthe pg_file_settings, pg_hba_file_rules and pg_ident_file_mappings views to\ncheck the configuration files for possible errors, before reloading.
[PG_REPLICATION_ORIGIN_ADVANCE]
declaration=node_name text, lsn pg_lsn
category=System Administration Functions
description=Sets replication progress for the given node to the given location. This is\nprimarily useful for setting up the initial location, or setting a new\nlocation after configuration changes and similar. Be aware that careless\nuse of this function can lead to inconsistently replicated data.
[PG_REPLICATION_ORIGIN_CREATE]
declaration=node_name text
category=System Administration Functions
description=Creates a replication origin with the given external name, and returns the\ninternal ID assigned to it.
[PG_REPLICATION_ORIGIN_DROP]
declaration=node_name text
category=System Administration Functions
description=Deletes a previously-created replication origin, including any associated\nreplay progress.
[PG_REPLICATION_ORIGIN_OID]
declaration=node_name text
category=System Administration Functions
description=Looks up a replication origin by name and returns the internal ID. If no\nsuch replication origin is found, NULL is returned.
[PG_REPLICATION_ORIGIN_PROGRESS]
declaration=node_name text, flush boolean
category=System Administration Functions
description=Returns the replay location for the given replication origin. The parameter\nflush determines whether the corresponding local transaction will be\nguaranteed to have been flushed to disk or not.
[PG_REPLICATION_ORIGIN_SESSION_IS_SETUP]
declaration=
category=System Administration Functions
description=Returns true if a replication origin has been selected in the current\nsession.
[PG_REPLICATION_ORIGIN_SESSION_PROGRESS]
declaration=flush boolean
category=System Administration Functions
description=Returns the replay location for the replication origin selected in the\ncurrent session. The parameter flush determines whether the corresponding\nlocal transaction will be guaranteed to have been flushed to disk or not.
[PG_REPLICATION_ORIGIN_SESSION_RESET]
declaration=
category=System Administration Functions
description=Cancels the effects of pg_replication_origin_session_setup().
[PG_REPLICATION_ORIGIN_SESSION_SETUP]
declaration=node_name text
category=System Administration Functions
description=Marks the current session as replaying from the given origin, allowing\nreplay progress to be tracked. Can only be used if no origin is currently\nselected. Use pg_replication_origin_session_reset to undo.
[PG_REPLICATION_ORIGIN_XACT_RESET]
declaration=
category=System Administration Functions
description=Cancels the effects of pg_replication_origin_xact_setup().
[PG_REPLICATION_ORIGIN_XACT_SETUP]
declaration=origin_lsn pg_lsn, origin_timestamp timestamp with time zone
category=System Administration Functions
description=Marks the current transaction as replaying a transaction that has committed\nat the given LSN and timestamp. Can only be called when a replication\norigin has been selected using pg_replication_origin_session_setup.
[PG_REPLICATION_SLOT_ADVANCE]
declaration=slot_name name, upto_lsn pg_lsn
category=System Administration Functions
description=Advances the current confirmed position of a replication slot named\nslot_name. The slot will not be moved backwards, and it will not be moved\nbeyond the current insert location. Returns the name of the slot and the\nactual position that it was advanced to. The updated slot position\ninformation is written out at the next checkpoint if any advancing is done.\nSo in the event of a crash, the slot may return to an earlier position. If\nthe specified slot is a logical failover slot then the function will not\nreturn until all physical slots specified in synchronized_standby_slots\nhave confirmed WAL receipt.
[PG_ROTATE_LOGFILE]
declaration=
category=System Administration Functions
description=Signals the log-file manager to switch to a new output file immediately.\nThis works only when the built-in log collector is running, since otherwise\nthere is no log-file manager subprocess.
[PG_SAFE_SNAPSHOT_BLOCKING_PIDS]
declaration=integer
category=Session Information Functions
description=Returns an array of the process ID(s) of the sessions that are blocking the\nserver process with the specified process ID from acquiring a safe\nsnapshot, or an empty array if there is no such server process or it is not\nblocked.
[PG_SETTINGS_GET_FLAGS]
declaration=guc text
category=Session Information Functions
description=Returns an array of the flags associated with the given GUC, or NULL if it\ndoes not exist. The result is an empty array if the GUC exists but there\nare no flags to show. Only the most useful flags listed in Table 9.78 are\nexposed.
[PG_SIZE_BYTES]
declaration=text
category=System Administration Functions
description=Converts a size in human-readable format (as returned by pg_size_pretty)\ninto bytes. Valid units are bytes, B, kB, MB, GB, TB, and PB.
[PG_SNAPSHOT_XIP]
declaration=pg_snapshot
category=Session Information Functions
description=Returns the set of in-progress transaction IDs contained in a snapshot.
[PG_SNAPSHOT_XMAX]
declaration=pg_snapshot
category=Session Information Functions
description=Returns the xmax of a snapshot.
[PG_SNAPSHOT_XMIN]
declaration=pg_snapshot
category=Session Information Functions
description=Returns the xmin of a snapshot.
[PG_SPLIT_WALFILE_NAME]
declaration=file_name text
category=System Administration Functions
description=Extracts the sequence number and timeline ID from a WAL file name.
[PG_STATISTICS_OBJ_IS_VISIBLE]
declaration=stat oid
category=Session Information Functions
description=Is statistics object visible in search path?
[PG_STAT_FILE]
declaration=filename text [, missing_ok boolean ]
category=System Administration Functions
description=Returns a record containing the file's size, last access time stamp, last\nmodification time stamp, last file status change time stamp (Unix platforms\nonly), file creation time stamp (Windows only), and a flag indicating if it\nis a directory.
[PG_SWITCH_WAL]
declaration=
category=System Administration Functions
description=Forces the server to switch to a new write-ahead log file, which allows the\ncurrent file to be archived (assuming you are using continuous archiving).\nThe result is the ending write-ahead log location plus 1 within the\njust-completed write-ahead log file. If there has been no write-ahead log\nactivity since the last write-ahead log switch, pg_switch_wal does nothing\nand returns the start location of the write-ahead log file currently in\nuse.
[PG_SYNC_REPLICATION_SLOTS]
declaration=
category=System Administration Functions
description=Synchronize the logical failover replication slots from the primary server\nto the standby server. This function can only be executed on the standby\nserver. Temporary synced slots, if any, cannot be used for logical decoding\nand must be dropped after promotion. See Section 47.2.3 for details. Note\nthat this function cannot be executed if sync_replication_slots is enabled\nand the slotsync worker is already running to perform the synchronization\nof slots.
[PG_TABLESPACE_DATABASES]
declaration=tablespace oid
category=Session Information Functions
description=Returns the set of OIDs of databases that have objects stored in the\nspecified tablespace. If this function returns any rows, the tablespace is\nnot empty and cannot be dropped. To identify the specific objects\npopulating the tablespace, you will need to connect to the database(s)\nidentified by pg_tablespace_databases and query their pg_class catalogs.
[PG_TABLESPACE_LOCATION]
declaration=tablespace oid
category=Session Information Functions
description=Returns the file system path that this tablespace is located in.
[PG_TABLE_IS_VISIBLE]
declaration=table oid
category=Session Information Functions
description=Is table visible in search path? (This works for all types of relations,\nincluding views, materialized views, indexes, sequences and foreign\ntables.)
[PG_TABLE_SIZE]
declaration=regclass
category=System Administration Functions
description=Computes the disk space used by the specified table, excluding indexes (but\nincluding its TOAST table if any, free space map, and visibility map).
[PG_TERMINATE_BACKEND]
declaration=pid integer, timeout bigint DEFAULT 0
category=System Administration Functions
description=Terminates the session whose backend process has the specified process ID.\nThis is also allowed if the calling role is a member of the role whose\nbackend is being terminated or the calling role has privileges of\npg_signal_backend, however only superusers can terminate superuser\nbackends.
[PG_TOTAL_RELATION_SIZE]
declaration=regclass
category=System Administration Functions
description=Computes the total disk space used by the specified table, including all\nindexes and TOAST data. The result is equivalent to pg_table_size +\npg_indexes_size.
[PG_TRIGGER_DEPTH]
declaration=
category=Session Information Functions
description=Returns the current nesting level of PostgreSQL triggers (0 if not called,\ndirectly or indirectly, from inside a trigger).
[PG_TS_CONFIG_IS_VISIBLE]
declaration=config oid
category=Session Information Functions
description=Is text search configuration visible in search path?
[PG_TS_DICT_IS_VISIBLE]
declaration=dict oid
category=Session Information Functions
description=Is text search dictionary visible in search path?
[PG_TS_PARSER_IS_VISIBLE]
declaration=parser oid
category=Session Information Functions
description=Is text search parser visible in search path?
[PG_TS_TEMPLATE_IS_VISIBLE]
declaration=template oid
category=Session Information Functions
description=Is text search template visible in search path?
[PG_TYPEOF]
declaration="any"
category=Session Information Functions
description=Returns the OID of the data type of the value that is passed to it. This\ncan be helpful for troubleshooting or dynamically constructing SQL queries.\nThe function is declared as returning regtype, which is an OID alias type\n(see Section 8.19); this means that it is the same as an OID for comparison\npurposes but displays as a type name.
[PG_TYPE_IS_VISIBLE]
declaration=type oid
category=Session Information Functions
description=Is type (or domain) visible in search path?
[PG_VISIBLE_IN_SNAPSHOT]
declaration=xid8, pg_snapshot
category=Session Information Functions
description=Is the given transaction ID visible according to this snapshot (that is,\nwas it completed before the snapshot was taken)? Note that this function\nwill not give the correct answer for a subtransaction ID (subxid); see\nSection 66.3 for details.
[PG_WALFILE_NAME]
declaration=lsn pg_lsn
category=System Administration Functions
description=Converts a write-ahead log location to the name of the WAL file holding\nthat location.
[PG_WALFILE_NAME_OFFSET]
declaration=lsn pg_lsn
category=System Administration Functions
description=Converts a write-ahead log location to a WAL file name and byte offset\nwithin that file.
[PG_WAL_LSN_DIFF]
declaration=lsn1 pg_lsn, lsn2 pg_lsn
category=System Administration Functions
description=Calculates the difference in bytes (lsn1 - lsn2) between two write-ahead\nlog locations. This can be used with pg_stat_replication or some of the\nfunctions shown in Table 9.95 to get the replication lag.
[PG_WAL_REPLAY_PAUSE]
declaration=
category=System Administration Functions
description=Request to pause recovery. A request doesn't mean that recovery stops right\naway. If you want a guarantee that recovery is actually paused, you need to\ncheck for the recovery pause state returned by\npg_get_wal_replay_pause_state(). Note that pg_is_wal_replay_paused()\nreturns whether a request is made. While recovery is paused, no further\ndatabase changes are applied. If hot standby is active, all new queries\nwill see the same consistent snapshot of the database, and no further query\nconflicts will be generated until recovery is resumed.
[PG_WAL_REPLAY_RESUME]
declaration=
category=System Administration Functions
description=Restarts recovery if it was paused.
[PG_WAL_SUMMARY_CONTENTS]
declaration=tli bigint, start_lsn pg_lsn, end_lsn pg_lsn
category=Session Information Functions
description=Returns one information about the contents of a single WAL summary file\nidentified by TLI and starting and ending LSNs. Each row with\nis_limit_block false indicates that the block identified by the remaining\noutput columns was modified by at least one WAL record within the range of\nrecords summarized by this file. Each row with is_limit_block true\nindicates either that (a) the relation fork was truncated to the length\ngiven by relblocknumber within the relevant range of WAL records or (b)\nthat the relation fork was created or dropped within the relevant range of\nWAL records; in such cases, relblocknumber will be zero.
[PG_XACT_COMMIT_TIMESTAMP]
declaration=xid
category=Session Information Functions
description=Returns the commit timestamp of a transaction.
[PG_XACT_COMMIT_TIMESTAMP_ORIGIN]
declaration=xid
category=Session Information Functions
description=Returns the commit timestamp and replication origin of a transaction.
[PG_XACT_STATUS]
declaration=xid8
category=Session Information Functions
description=Reports the commit status of a recent transaction. The result is one of in\nprogress, committed, or aborted, provided that the transaction is recent\nenough that the system retains the commit status of that transaction. If it\nis old enough that no references to the transaction survive in the system\nand the commit status information has been discarded, the result is NULL.\nApplications might use this function, for example, to determine whether\ntheir transaction committed or aborted after the application and database\nserver become disconnected while a COMMIT is in progress. Note that\nprepared transactions are reported as in progress; applications must check\npg_prepared_xacts if they need to determine whether a transaction ID\nbelongs to a prepared transaction.
[PHRASETO_TSQUERY]
declaration=[ config regconfig, ] query text
category=Text Search Functions
description=Converts text to a tsquery, normalizing words according to the specified or\ndefault configuration. Any punctuation in the string is ignored (it does\nnot determine query operators). The resulting query matches phrases\ncontaining all non-stopwords in the text.
[PI]
declaration=
category=Numeric/Math Functions
description=Approximate value of π
[PLAINTO_TSQUERY]
declaration=[ config regconfig, ] query text
category=Text Search Functions
description=Converts text to a tsquery, normalizing words according to the specified or\ndefault configuration. Any punctuation in the string is ignored (it does\nnot determine query operators). The resulting query matches documents\ncontaining all non-stopwords in the text.
[POINT]
declaration=double precision, double precision
category=Geometric Functions
description=Constructs point from its coordinates.
[POLYGON]
declaration=box
category=Geometric Functions
description=Converts box to a 4-point polygon.
[POPEN]
declaration=path
category=Geometric Functions
description=Converts path to open form.
[POSITION1]
name=POSITION
declaration=substring text IN string text
category=String Functions
description=Returns first starting index of the specified substring within string, or\nzero if it's not present.
[POSITION2]
name=POSITION
declaration=substring bytea IN bytes bytea
category=Binary String Functions
description=Returns first starting index of the specified substring within bytes, or\nzero if it's not present.
[POSITION3]
name=POSITION
declaration=substring bit IN bits bit
category=Bit String Functions
description=Returns first starting index of the specified substring within bits, or\nzero if it's not present.
[QUERYTREE]
declaration=tsquery
category=Text Search Functions
description=Produces a representation of the indexable portion of a tsquery. A result\nthat is empty or just T indicates a non-indexable query.
[QUOTE_IDENT]
declaration=text
category=String Functions
description=Returns the given string suitably quoted to be used as an identifier in an\nSQL statement string. Quotes are added only if necessary (i.e., if the\nstring contains non-identifier characters or would be case-folded).\nEmbedded quotes are properly doubled. See also Example 41.1.
[QUOTE_LITERAL]
declaration=text
category=String Functions
description=Returns the given string suitably quoted to be used as a string literal in\nan SQL statement string. Embedded single-quotes and backslashes are\nproperly doubled. Note that quote_literal returns null on null input; if\nthe argument might be null, quote_nullable is often more suitable. See also\nExample 41.1.
[QUOTE_NULLABLE]
declaration=text
category=String Functions
description=Returns the given string suitably quoted to be used as a string literal in\nan SQL statement string; or, if the argument is null, returns NULL.\nEmbedded single-quotes and backslashes are properly doubled. See also\nExample 41.1.
[RADIANS]
declaration=double precision
category=Numeric/Math Functions
description=Converts degrees to radians
[RADIUS]
declaration=circle
category=Geometric Functions
description=Computes radius of circle.
[RANDOM]
declaration=
category=Numeric/Math Functions
description=Returns a random value in the range 0.0 <= x < 1.0
[RANDOM_NORMAL]
declaration=[ mean double precision [, stddev double precision ]]
category=Numeric/Math Functions
description=Returns a random value from the normal distribution with the given\nparameters; mean defaults to 0.0 and stddev defaults to 1.0
[RANGE_MERGE1]
name=RANGE_MERGE
declaration=anyrange, anyrange
category=Range Functions
description=Computes the smallest range that includes both of the given ranges.
[RANGE_MERGE2]
name=RANGE_MERGE
declaration=anymultirange
category=Range Functions
description=Computes the smallest range that includes the entire multirange.
[RANK1]
name=RANK
declaration=args
category=Aggregate Functions
description=Computes the rank of the hypothetical row, with gaps; that is, the row\nnumber of the first row in its peer group.
[RANK2]
name=RANK
declaration=
category=Window Functions
description=Returns the rank of the current row, with gaps; that is, the row_number of\nthe first row in its peer group.
[REGEXP_COUNT]
declaration=string text, pattern text [, start integer [, flags text ] ]
category=String Functions
description=Returns the number of times the POSIX regular expression pattern matches in\nthe string; see Section 9.7.3.
[REGEXP_INSTR]
declaration=string text, pattern text [, start integer [, N integer [, endoption integer [, flags text [, subexpr integer ] ] ] ] ]
category=String Functions
description=Returns the position within string where the N'th match of the POSIX\nregular expression pattern occurs, or zero if there is no such match; see\nSection 9.7.3.
[REGEXP_LIKE]
declaration=string text, pattern text [, flags text ]
category=String Functions
description=Checks whether a match of the POSIX regular expression pattern occurs\nwithin string; see Section 9.7.3.
[REGEXP_MATCH]
declaration=string text, pattern text [, flags text ]
category=String Functions
description=Returns substrings within the first match of the POSIX regular expression\npattern to the string; see Section 9.7.3.
[REGEXP_MATCHES]
declaration=string text, pattern text [, flags text ]
category=String Functions
description=Returns substrings within the first match of the POSIX regular expression\npattern to the string, or substrings within all such matches if the g flag\nis used; see Section 9.7.3.
[REGEXP_REPLACE]
declaration=string text, pattern text, replacement text [, start integer ] [, flags text ]
category=String Functions
description=Replaces the substring that is the first match to the POSIX regular\nexpression pattern, or all such matches if the g flag is used; see Section\n9.7.3.
[REGEXP_SPLIT_TO_ARRAY]
declaration=string text, pattern text [, flags text ]
category=String Functions
description=Splits string using a POSIX regular expression as the delimiter, producing\nan array of results; see Section 9.7.3.
[REGEXP_SPLIT_TO_TABLE]
declaration=string text, pattern text [, flags text ]
category=String Functions
description=Splits string using a POSIX regular expression as the delimiter, producing\na set of results; see Section 9.7.3.
[REGEXP_SUBSTR]
declaration=string text, pattern text [, start integer [, N integer [, flags text [, subexpr integer ] ] ] ]
category=String Functions
description=Returns the substring within string that matches the N'th occurrence of the\nPOSIX regular expression pattern, or NULL if there is no such match; see\nSection 9.7.3.
[REGR_AVGX]
declaration=Y double precision, X double precision
category=Aggregate Functions
description=Computes the average of the independent variable, sum(X)/N.
[REGR_AVGY]
declaration=Y double precision, X double precision
category=Aggregate Functions
description=Computes the average of the dependent variable, sum(Y)/N.
[REGR_COUNT]
declaration=Y double precision, X double precision
category=Aggregate Functions
description=Computes the number of rows in which both inputs are non-null.
[REGR_R2]
declaration=Y double precision, X double precision
category=Aggregate Functions
description=Computes the square of the correlation coefficient.
[REGR_SXX]
declaration=Y double precision, X double precision
category=Aggregate Functions
description=Computes the "sum of squares" of the independent variable, sum(X^2) -\nsum(X)^2/N.
[REGR_SXY]
declaration=Y double precision, X double precision
category=Aggregate Functions
description=Computes the "sum of products" of independent times dependent variables,\nsum(X*Y) - sum(X) * sum(Y)/N.
[REGR_SYY]
declaration=Y double precision, X double precision
category=Aggregate Functions
description=Computes the "sum of squares" of the dependent variable, sum(Y^2) -\nsum(Y)^2/N.
[REPEAT]
declaration=string text, number integer
category=String Functions
description=Repeats string the specified number of times.
[REPLACE]
declaration=string text, from text, to text
category=String Functions
description=Replaces all occurrences in string of substring from with substring to.
[REVERSE]
declaration=text
category=String Functions
description=Reverses the order of the characters in the string.
[RIGHT]
declaration=string text, n integer
category=String Functions
description=Returns last n characters in the string, or when n is negative, returns all\nbut first |n| characters.
[ROW_NUMBER]
declaration=
category=Window Functions
description=Returns the number of the current row within its partition, counting from\n1.
[ROW_SECURITY_ACTIVE]
declaration=table text or oid
category=Session Information Functions
description=Is row-level security active for the specified table in the context of the\ncurrent user and current environment?
[ROW_TO_JSON]
declaration=record [, boolean ]
category=JSON Functions
description=Converts an SQL composite value to a JSON object. The behavior is the same\nas to_json except that line feeds will be added between top-level elements\nif the optional boolean parameter is true.
[RPAD]
declaration=string text, length integer [, fill text ]
category=String Functions
description=Extends the string to length length by appending the characters fill (a\nspace by default). If the string is already longer than length then it is\ntruncated.
[RTRIM1]
name=RTRIM
declaration=string text [, characters text ]
category=String Functions
description=Removes the longest string containing only characters in characters (a\nspace by default) from the end of string.
[RTRIM2]
name=RTRIM
declaration=bytes bytea, bytesremoved bytea
category=Binary String Functions
description=Removes the longest string containing only bytes appearing in bytesremoved\nfrom the end of bytes.
[SCALE]
declaration=numeric
category=Numeric/Math Functions
description=Scale of the argument (the number of decimal digits in the fractional part)
[SETSEED]
declaration=double precision
category=Numeric/Math Functions
description=Sets the seed for subsequent random() and random_normal() calls; argument\nmust be between -1.0 and 1.0, inclusive
[SETVAL]
declaration=regclass, bigint [, boolean ]
category=Sequence Manipulation Functions
description=Sets the sequence object's current value, and optionally its is_called\nflag. The two-parameter form sets the sequence's last_value field to the\nspecified value and sets its is_called field to true, meaning that the next\nnextval will advance the sequence before returning a value. The value that\nwill be reported by currval is also set to the specified value. In the\nthree-parameter form, is_called can be set to either true or false. true\nhas the same effect as the two-parameter form. If it is set to false, the\nnext nextval will return exactly the specified value, and sequence\nadvancement commences with the following nextval. Furthermore, the value\nreported by currval is not changed in this case. For example,
[SETWEIGHT1]
name=SETWEIGHT
declaration=vector tsvector, weight "char"
category=Text Search Functions
description=Assigns the specified weight to each element of the vector.
[SETWEIGHT2]
name=SETWEIGHT
declaration=vector tsvector, weight "char", lexemes text[]
category=Text Search Functions
description=Assigns the specified weight to elements of the vector that are listed in\nlexemes. The strings in lexemes are taken as lexemes as-is, without further\nprocessing. Strings that do not match any lexeme in vector are ignored.
[SET_BIT1]
name=SET_BIT
declaration=bytes bytea, n bigint, newvalue integer
category=Binary String Functions
description=Sets n'th bit in binary string to newvalue.
[SET_BIT2]
name=SET_BIT
declaration=bits bit, n integer, newvalue integer
category=Bit String Functions
description=Sets n'th bit in bit string to newvalue; the first (leftmost) bit is bit 0.
[SET_BYTE]
declaration=bytes bytea, n integer, newvalue integer
category=Binary String Functions
description=Sets n'th byte in binary string to newvalue.
[SET_CONFIG]
declaration=setting_name text, new_value text, is_local boolean
category=System Administration Functions
description=Sets the parameter setting_name to new_value, and returns that value. If\nis_local is true, the new value will only apply during the current\ntransaction. If you want the new value to apply for the rest of the current\nsession, use false instead. This function corresponds to the SQL command\nSET.
[SET_MASKLEN]
declaration=inet, integer
category=Network Address Functions
description=Sets the netmask length for an inet value. The address part does not\nchange.
[SHA224]
declaration=bytea
category=Binary String Functions
description=Computes the SHA-224 hash of the binary string.
[SHA256]
declaration=bytea
category=Binary String Functions
description=Computes the SHA-256 hash of the binary string.
[SHA384]
declaration=bytea
category=Binary String Functions
description=Computes the SHA-384 hash of the binary string.
[SHA512]
declaration=bytea
category=Binary String Functions
description=Computes the SHA-512 hash of the binary string.
[SHOBJ_DESCRIPTION]
declaration=object oid, catalog name
category=Session Information Functions
description=Returns the comment for a shared database object specified by its OID and\nthe name of the containing system catalog. This is just like\nobj_description except that it is used for retrieving comments on shared\nobjects (that is, databases, roles, and tablespaces). Some system catalogs\nare global to all databases within each cluster, and the descriptions for\nobjects in them are stored globally as well.
[SIN]
declaration=double precision
category=Numeric/Math Functions
description=Sine, argument in radians
[SIND]
declaration=double precision
category=Numeric/Math Functions
description=Sine, argument in degrees
[SINH]
declaration=double precision
category=Numeric/Math Functions
description=Hyperbolic sine
[SLOPE]
declaration=point, point
category=Geometric Functions
description=Computes slope of a line drawn through the two points.
[SPLIT_PART]
declaration=string text, delimiter text, n integer
category=String Functions
description=Splits string at occurrences of delimiter and returns the n'th field\n(counting from one), or when n is negative, returns the |n|'th-from-last\nfield.
[STARTS_WITH]
declaration=string text, prefix text
category=String Functions
description=Returns true if string starts with prefix.
[STATEMENT_TIMESTAMP]
declaration=
category=Date/Time Functions
description=Current date and time (start of current statement); see Section 9.9.5
[STRING_TO_ARRAY]
declaration=string text, delimiter text [, null_string text ]
category=String Functions
description=Splits the string at occurrences of delimiter and forms the resulting\nfields into a text array. If delimiter is NULL, each character in the\nstring will become a separate element in the array. If delimiter is an\nempty string, then the string is treated as a single field. If null_string\nis supplied and is not NULL, fields matching that string are replaced by\nNULL. See also array_to_string.
[STRING_TO_TABLE]
declaration=string text, delimiter text [, null_string text ]
category=String Functions
description=Splits the string at occurrences of delimiter and returns the resulting\nfields as a set of text rows. If delimiter is NULL, each character in the\nstring will become a separate row of the result. If delimiter is an empty\nstring, then the string is treated as a single field. If null_string is\nsupplied and is not NULL, fields matching that string are replaced by NULL.
[STRIP]
declaration=tsvector
category=Text Search Functions
description=Removes positions and weights from the tsvector.
[STRPOS]
declaration=string text, substring text
category=String Functions
description=Returns first starting index of the specified substring within string, or\nzero if it's not present. (Same as position(substring in string), but note\nthe reversed argument order.)
[SUBSTR1]
name=SUBSTR
declaration=string text, start integer [, count integer ]
category=String Functions
description=Extracts the substring of string starting at the start'th character, and\nextending for count characters if that is specified. (Same as\nsubstring(string from start for count).)
[SUBSTR2]
name=SUBSTR
declaration=bytes bytea, start integer [, count integer ]
category=Binary String Functions
description=Extracts the substring of bytes starting at the start'th byte, and\nextending for count bytes if that is specified. (Same as substring(bytes\nfrom start for count).)
[SUBSTRING1]
name=SUBSTRING
declaration=string text [ FROM start integer ] [ FOR count integer ]
category=String Functions
description=Extracts the substring of string starting at the start'th character if that\nis specified, and stopping after count characters if that is specified.\nProvide at least one of start and count.
[SUBSTRING2]
name=SUBSTRING
declaration=bytes bytea [ FROM start integer ] [ FOR count integer ]
category=Binary String Functions
description=Extracts the substring of bytes starting at the start'th byte if that is\nspecified, and stopping after count bytes if that is specified. Provide at\nleast one of start and count.
[SUBSTRING3]
name=SUBSTRING
declaration=bits bit [ FROM start integer ] [ FOR count integer ]
category=Bit String Functions
description=Extracts the substring of bits starting at the start'th bit if that is\nspecified, and stopping after count bits if that is specified. Provide at\nleast one of start and count.
[SUPPRESS_REDUNDANT_UPDATES_TRIGGER]
declaration=
category=Trigger Functions
description=Suppresses do-nothing update operations. See below for details.
[TAN]
declaration=double precision
category=Numeric/Math Functions
description=Tangent, argument in radians
[TAND]
declaration=double precision
category=Numeric/Math Functions
description=Tangent, argument in degrees
[TANH]
declaration=double precision
category=Numeric/Math Functions
description=Hyperbolic tangent
[TEXT]
declaration=inet
category=Network Address Functions
description=Returns the unabbreviated IP address and netmask length as text. (This has\nthe same result as an explicit cast to text.)
[TIMEOFDAY]
declaration=
category=Date/Time Functions
description=Current date and time (like clock_timestamp, but as a text string); see\nSection 9.9.5
[TO_JSONB]
declaration=anyelement
category=JSON Functions
description=Converts any SQL value to json or jsonb. Arrays and composites are\nconverted recursively to arrays and objects (multidimensional arrays become\narrays of arrays in JSON). Otherwise, if there is a cast from the SQL data\ntype to json, the cast function will be used to perform the conversion;[a]\notherwise, a scalar JSON value is produced. For any scalar other than a\nnumber, a Boolean, or a null value, the text representation will be used,\nwith escaping as necessary to make it a valid JSON string value.
[TO_REGCLASS]
declaration=text
category=Session Information Functions
description=Translates a textual relation name to its OID. A similar result is obtained\nby casting the string to type regclass (see Section 8.19); however, this\nfunction will return NULL rather than throwing an error if the name is not\nfound.
[TO_REGCOLLATION]
declaration=text
category=Session Information Functions
description=Translates a textual collation name to its OID. A similar result is\nobtained by casting the string to type regcollation (see Section 8.19);\nhowever, this function will return NULL rather than throwing an error if\nthe name is not found.
[TO_REGNAMESPACE]
declaration=text
category=Session Information Functions
description=Translates a textual schema name to its OID. A similar result is obtained\nby casting the string to type regnamespace (see Section 8.19); however,\nthis function will return NULL rather than throwing an error if the name is\nnot found.
[TO_REGOPER]
declaration=text
category=Session Information Functions
description=Translates a textual operator name to its OID. A similar result is obtained\nby casting the string to type regoper (see Section 8.19); however, this\nfunction will return NULL rather than throwing an error if the name is not\nfound or is ambiguous.
[TO_REGOPERATOR]
declaration=text
category=Session Information Functions
description=Translates a textual operator name (with parameter types) to its OID. A\nsimilar result is obtained by casting the string to type regoperator (see\nSection 8.19); however, this function will return NULL rather than throwing\nan error if the name is not found.
[TO_REGPROC]
declaration=text
category=Session Information Functions
description=Translates a textual function or procedure name to its OID. A similar\nresult is obtained by casting the string to type regproc (see Section\n8.19); however, this function will return NULL rather than throwing an\nerror if the name is not found or is ambiguous.
[TO_REGPROCEDURE]
declaration=text
category=Session Information Functions
description=Translates a textual function or procedure name (with argument types) to\nits OID. A similar result is obtained by casting the string to type\nregprocedure (see Section 8.19); however, this function will return NULL\nrather than throwing an error if the name is not found.
[TO_REGROLE]
declaration=text
category=Session Information Functions
description=Translates a textual role name to its OID. A similar result is obtained by\ncasting the string to type regrole (see Section 8.19); however, this\nfunction will return NULL rather than throwing an error if the name is not\nfound.
[TO_REGTYPE]
declaration=text
category=Session Information Functions
description=Parses a string of text, extracts a potential type name from it, and\ntranslates that name into a type OID. A syntax error in the string will\nresult in an error; but if the string is a syntactically valid type name\nthat happens not to be found in the catalogs, the result is NULL. A similar\nresult is obtained by casting the string to type regtype (see Section\n8.19), except that that will throw error for name not found.
[TO_REGTYPEMOD]
declaration=text
category=Session Information Functions
description=Parses a string of text, extracts a potential type name from it, and\ntranslates its type modifier, if any. A syntax error in the string will\nresult in an error; but if the string is a syntactically valid type name\nthat happens not to be found in the catalogs, the result is NULL. The\nresult is -1 if no type modifier is present.
[TO_TIMESTAMP]
declaration=double precision
category=Date/Time Functions
description=Convert Unix epoch (seconds since 1970-01-01 00:00:00+00) to timestamp with\ntime zone
[TO_TSQUERY]
declaration=[ config regconfig, ] query text
category=Text Search Functions
description=Converts text to a tsquery, normalizing words according to the specified or\ndefault configuration. The words must be combined by valid tsquery\noperators.
[TO_TSVECTOR]
declaration=[ config regconfig, ] document text
category=Text Search Functions
description=Converts text to a tsvector, normalizing words according to the specified\nor default configuration. Position information is included in the result.
[TRANSACTION_TIMESTAMP]
declaration=
category=Date/Time Functions
description=Current date and time (start of current transaction); see Section 9.9.5
[TRANSLATE]
declaration=string text, from text, to text
category=String Functions
description=Replaces each character in string that matches a character in the from set\nwith the corresponding character in the to set. If from is longer than to,\noccurrences of the extra characters in from are deleted.
[TRIM1]
name=TRIM
declaration=[ LEADING | TRAILING | BOTH ] [ characters text ] FROM string text
category=String Functions
description=Removes the longest string containing only characters in characters (a\nspace by default) from the start, end, or both ends (BOTH is the default)\nof string.
[TRIM2]
name=TRIM
declaration=[ LEADING | TRAILING | BOTH ] bytesremoved bytea FROM bytes bytea
category=Binary String Functions
description=Removes the longest string containing only bytes appearing in bytesremoved\nfrom the start, end, or both ends (BOTH is the default) of bytes.
[TRIM_ARRAY]
declaration=array anyarray, n integer
category=Array Functions
description=Trims an array by removing the last n elements. If the array is\nmultidimensional, only the first dimension is trimmed.
[TRIM_SCALE]
declaration=numeric
category=Numeric/Math Functions
description=Reduces the value's scale (number of fractional decimal digits) by removing\ntrailing zeroes
[TRUNC]
declaration=macaddr
category=Network Address Functions
description=Sets the last 3 bytes of the address to zero. The remaining prefix can be\nassociated with a particular manufacturer (using data not included in\nPostgreSQL).
[TSQUERY_PHRASE]
declaration=query1 tsquery, query2 tsquery
category=Text Search Functions
description=Constructs a phrase query that searches for matches of query1 and query2 at\nsuccessive lexemes (same as <-> operator).
[TSVECTOR_TO_ARRAY]
declaration=tsvector
category=Text Search Functions
description=Converts a tsvector to an array of lexemes.
[TSVECTOR_UPDATE_TRIGGER]
declaration=
category=Trigger Functions
description=Automatically updates a tsvector column from associated plain-text document\ncolumn(s). The text search configuration to use is specified by name as a\ntrigger argument. See Section 12.4.3 for details.
[TSVECTOR_UPDATE_TRIGGER_COLUMN]
declaration=
category=Trigger Functions
description=Automatically updates a tsvector column from associated plain-text document\ncolumn(s). The text search configuration to use is taken from a regconfig\ncolumn of the table. See Section 12.4.3 for details.
[TS_DEBUG]
declaration=[ config regconfig, ] document text
category=Text Search Functions
description=Extracts and normalizes tokens from the document according to the specified\nor default text search configuration, and returns information about how\neach token was processed. See Section 12.8.1 for details.
[TS_DELETE]
declaration=vector tsvector, lexeme text
category=Text Search Functions
description=Removes any occurrence of the given lexeme from the vector. The lexeme\nstring is treated as a lexeme as-is, without further processing.
[TS_FILTER]
declaration=vector tsvector, weights "char"[]
category=Text Search Functions
description=Selects only elements with the given weights from the vector.
[TS_HEADLINE]
declaration=[ config regconfig, ] document text, query tsquery [, options text ]
category=Text Search Functions
description=Displays, in an abbreviated form, the match(es) for the query in the\ndocument, which must be raw text not a tsvector. Words in the document are\nnormalized according to the specified or default configuration before\nmatching to the query. Use of this function is discussed in Section 12.3.4,\nwhich also describes the available options.
[TS_LEXIZE]
declaration=dict regdictionary, token text
category=Text Search Functions
description=Returns an array of replacement lexemes if the input token is known to the\ndictionary, or an empty array if the token is known to the dictionary but\nit is a stop word, or NULL if it is not a known word. See Section 12.8.3\nfor details.
[TS_PARSE]
declaration=parser_name text, document text
category=Text Search Functions
description=Extracts tokens from the document using the named parser. See Section\n12.8.2 for details.
[TS_RANK]
declaration=[ weights real[], ] vector tsvector, query tsquery [, normalization integer ]
category=Text Search Functions
description=Computes a score showing how well the vector matches the query. See Section\n12.3.3 for details.
[TS_RANK_CD]
declaration=[ weights real[], ] vector tsvector, query tsquery [, normalization integer ]
category=Text Search Functions
description=Computes a score showing how well the vector matches the query, using a\ncover density algorithm. See Section 12.3.3 for details.
[TS_REWRITE]
declaration=query tsquery, target tsquery, substitute tsquery
category=Text Search Functions
description=Replaces occurrences of target with substitute within the query. See\nSection 12.4.2.1 for details.
[TS_STAT]
declaration=sqlquery text [, weights text ]
category=Text Search Functions
description=Executes the sqlquery, which must return a single tsvector column, and\nreturns statistics about each distinct lexeme contained in the data. See\nSection 12.4.4 for details.
[TS_TOKEN_TYPE]
declaration=parser_name text
category=Text Search Functions
description=Returns a table that describes each type of token the named parser can\nrecognize. See Section 12.8.2 for details.
[TXID_CURRENT]
declaration=
category=Session Information Functions
description=See pg_current_xact_id().
[TXID_CURRENT_IF_ASSIGNED]
declaration=
category=Session Information Functions
description=See pg_current_xact_id_if_assigned().
[TXID_CURRENT_SNAPSHOT]
declaration=
category=Session Information Functions
description=See pg_current_snapshot().
[TXID_SNAPSHOT_XIP]
declaration=txid_snapshot
category=Session Information Functions
description=See pg_snapshot_xip().
[TXID_SNAPSHOT_XMAX]
declaration=txid_snapshot
category=Session Information Functions
description=See pg_snapshot_xmax().
[TXID_SNAPSHOT_XMIN]
declaration=txid_snapshot
category=Session Information Functions
description=See pg_snapshot_xmin().
[TXID_STATUS]
declaration=bigint
category=Session Information Functions
description=See pg_xact_status().
[TXID_VISIBLE_IN_SNAPSHOT]
declaration=bigint, txid_snapshot
category=Session Information Functions
description=See pg_visible_in_snapshot().
[UNICODE_ASSIGNED]
declaration=text
category=String Functions
description=Returns true if all characters in the string are assigned Unicode\ncodepoints; false otherwise. This function can only be used when the server\nencoding is UTF8.
[UNICODE_VERSION]
declaration=
category=Session Information Functions
description=Returns a string representing the version of Unicode used by PostgreSQL.
[UNISTR]
declaration=text
category=String Functions
description=Evaluate escaped Unicode characters in the argument. Unicode characters can\nbe specified as \XXXX (4 hexadecimal digits), \+XXXXXX (6 hexadecimal\ndigits), \uXXXX (4 hexadecimal digits), or \UXXXXXXXX (8 hexadecimal\ndigits). To specify a backslash, write two backslashes. All other\ncharacters are taken literally.
[UNNEST1]
name=UNNEST
declaration=tsvector
category=Text Search Functions
description=Expands a tsvector into a set of rows, one per lexeme.
[UNNEST2]
name=UNNEST
declaration=anyarray
category=Array Functions
description=Expands an array into a set of rows. The array's elements are read out in\nstorage order.
[UNNEST3]
name=UNNEST
declaration=anymultirange
category=Range Functions
description=Expands a multirange into a set of ranges in ascending order.
[UPPER1]
name=UPPER
declaration=text
category=String Functions
description=Converts the string to all upper case, according to the rules of the\ndatabase's locale.
[UPPER2]
name=UPPER
declaration=anyrange
category=Range Functions
description=Extracts the upper bound of the range (NULL if the range is empty or has no\nupper bound).
[UPPER3]
name=UPPER
declaration=anymultirange
category=Range Functions
description=Extracts the upper bound of the multirange (NULL if the multirange is empty\nor has no upper bound).
[UPPER_INC1]
name=UPPER_INC
declaration=anyrange
category=Range Functions
description=Is the range's upper bound inclusive?
[UPPER_INC2]
name=UPPER_INC
declaration=anymultirange
category=Range Functions
description=Is the multirange's upper bound inclusive?
[UPPER_INF1]
name=UPPER_INF
declaration=anyrange
category=Range Functions
description=Does the range have no upper bound? (An upper bound of Infinity returns\nfalse.)
[UPPER_INF2]
name=UPPER_INF
declaration=anymultirange
category=Range Functions
description=Does the multirange have no upper bound? (An upper bound of Infinity\nreturns false.)
[VARIANCE]
declaration=numeric_type
category=Aggregate Functions
description=This is a historical alias for var_samp.
[VERSION]
declaration=
category=Session Information Functions
description=Returns a string describing the PostgreSQL server's version. You can also\nget this information from server_version, or for a machine-readable version\nuse server_version_num. Software developers should use server_version_num\n(available since 8.2) or PQserverVersion instead of parsing the text\nversion.
[WEBSEARCH_TO_TSQUERY]
declaration=[ config regconfig, ] query text
category=Text Search Functions
description=Converts text to a tsquery, normalizing words according to the specified or\ndefault configuration. Quoted word sequences are converted to phrase tests.\nThe word "or" is understood as producing an OR operator, and a dash\nproduces a NOT operator; other punctuation is ignored. This approximates\nthe behavior of some common web search tools.
[WIDTH]
declaration=box
category=Geometric Functions
description=Computes horizontal size of box.
[XMLAGG]
declaration=xml ORDER BY input_sort_columns
category=Aggregate Functions
description=Concatenates the non-null XML input values (see Section 9.15.1.8).