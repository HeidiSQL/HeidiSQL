[$PARTITION]
declaration=database_name,partition_function_name,expression
category=System
description=Returns the partition number into which a set of partitioning column values would be mapped for any specified partition function in SQL Server 2017.
[@@CONNECTIONS]
declaration=
category=System Statistical
description=This function returns the number of attempted connections - both successful and unsuccessful - since SQL Server was last started
[@@CONNECTIONS]
declaration=
category=System Statistical
description=This function returns the number of attempted connections - both successful and unsuccessful - since SQL Server was last started.
[@@CPU_BUSY]
declaration=
category=System Statistical
description=This function returns the amount of time that SQL Server has spent in active operation since its latest start. @@CPU_BUSY returns a result measured in CPU time increments, or "ticks." This value is cumulative for all CPUs, so it may exceed the actual elapsed time. To convert to microseconds, multiply by @@TIMETICKS.
[@@CURSOR_ROWS]
declaration=
category=Cursor
description=This returns the number of qualifying rows currently in the last cursor opened on the connection. To improve performance, SQL Server can populate large keyset and static cursors asynchronously. @@CURSOR_ROWS can be called to determine that the number of the rows that qualify for a cursor are retrieved at the time of the @@CURSOR_ROWS call.
[@@DATEFIRST]
declaration=
category=Date and time
description=This function returns the current value of SET DATEFIRST, for a specific session.
[@@DBTS]
declaration=
category=Configuration
description=This function returns the value of the current timestamp data type for the current database. The current database will have a guaranteed unique timestamp value.
[@@ERROR]
declaration=
category=System
description=Returns the error number for the last Transact-SQL statement executed.
[@@FETCH_STATUS]
declaration=
category=Cursor
description=This function returns the status of the last cursor FETCH statement issued against any cursor currently opened by the connection.
[@@IDENTITY]
declaration=
category=System
description=Is a system function that returns the last-inserted identity value.
[@@IDLE]
declaration=
category=System Statistical
description=Returns the time that SQL Server has been idle since it was last started. The result is in CPU time increments, or "ticks," and is cumulative for all CPUs, so it may exceed the actual elapsed time. Multiply by @@TIMETICKS to convert to microseconds.
[@@IO_BUSY]
declaration=
category=System Statistical
description=Returns the time that SQL Server has spent performing input and output operations since SQL Server was last started. The result is in CPU time increments ("ticks"), and is cumulative for all CPUs, so it may exceed the actual elapsed time. Multiply by @@TIMETICKS to convert to microseconds.
[@@LANGID]
declaration=
category=Configuration
description=Returns the local language identifier (ID) of the language that is currently being used.
[@@LANGUAGE]
declaration=
category=Configuration
description=Returns the name of the language currently being used.
[@@LOCK_TIMEOUT]
declaration=
category=Configuration
description=Returns the current lock time-out setting in milliseconds for the current session.
[@@MAX_CONNECTIONS]
declaration=
category=Configuration
description=Returns the maximum number of simultaneous user connections allowed on an instance of SQL Server. The number returned is not necessarily the number currently configured.
[@@MAX_PRECISION]
declaration=
category=Configuration
description=Returns the precision level used by decimal and numeric data types as currently set in the server.
[@@NESTLEVEL]
declaration=
category=Configuration
description=Returns the nesting level of the current stored procedure execution (initially 0) on the local server.
[@@OPTIONS]
declaration=
category=Configuration
description=Returns information about the current SET options.
[@@PACKET_ERRORS]
declaration=
category=System Statistical
description=Returns the number of network packet errors that have occurred on SQL Server connections since SQL Server was last started.
[@@PACK_RECEIVED]
declaration=
category=System
description=Returns the number of input packets read from the network by SQL Server since it was last started.
[@@PACK_SENT]
declaration=
category=System Statistical
description=Returns the number of output packets written to the network by SQL Server since it was last started.
[@@PROCID]
declaration=
category=Metadata
description=Returns the object identifier (ID) of the current Transact-SQL module. A Transact-SQL module can be a stored procedure, user-defined function, or trigger. @@PROCID cannot be specified in CLR modules or the in-process data access provider.
[@@REMSERVER]
declaration=
category=Configuration
description=Important This feature will be removed in the next version of Microsoft SQL Server. Do not use this feature in new development work, and modify applications that currently use this feature as soon as possible. Use linked servers and linked server stored procedures instead.
[@@ROWCOUNT]
declaration=
category=System
description=Returns the number of rows affected by the last statement. If the number of rows is more than 2 billion, use ROWCOUNT_BIG.
[@@SERVERNAME]
declaration=
category=Configuration
description=Returns the name of the local server that is running SQL Server.
[@@SERVICENAME]
declaration=
category=Configuration
description=Returns the name of the registry key under which SQL Server is running. @@SERVICENAME returns 'MSSQLSERVER' if the current instance is the default instance; this function returns the instance name if the current instance is a named instance.
[@@SPID]
declaration=
category=Configuration
description=Returns the session ID of the current user process.
[@@TEXTSIZE]
declaration=
category=Configuration
description=Returns the current value of the TEXTSIZE option.
[@@TIMETICKS]
declaration=
category=System Statistical
description=Returns the number of microseconds per tick.
[@@TOTAL_ERRORS]
declaration=
category=System Statistical
description=Returns the number of disk write errors encountered by SQL Server since SQL Server last started.
[@@TOTAL_READ]
declaration=
category=System Statistical
description=Returns the number of disk reads, not cache reads, by SQL Server since SQL Server was last started.
[@@TOTAL_WRITE]
declaration=
category=System Statistical
description=Returns the number of disk writes by SQL Server since SQL Server was last started.
[@@VERSION]
declaration=
category=Configuration
description=Returns system and build information for the current installation of SQL Server.
[ABS]
declaration=numeric_expression
category=Mathematical
description=A mathematical function that returns the absolute (positive) value of the specified numeric expression. (ABS changes negative values to positive values. ABS has no effect on zero or positive values.)
[ACOS]
declaration=float_expression
category=Mathematical
description=A function that returns the angle, in radians, whose cosine is the specified float expression. This is also called arccosine.
[APPLOCK_MODE]
declaration='database_principal','resource_name','lock_owner'
category=Metadata
description=This function returns the lock mode held by the lock owner on a particular application resource. As an application lock function, APPLOCK_MODE operates on the current database. The database is the scope of the application locks.
[APPLOCK_TEST]
declaration=' database_principal ',' resource_name ',' lock_mode ',' lock_owner '
category=Metadata
description=This function returns information as to whether or not a lock can be granted on a particular application resource, for a specified lock owner, without acquisition of the lock. As an application lock function, APPLOCK_TEST operates on the current database. The database is the scope of the application locks.
[APPROX_COUNT_DISTINCT]
declaration=expression
category=Aggregate
description=This function returns the approximate number of unique non-null values in a group.
[APP_NAME]
declaration=
category=Metadata
description=This function returns the application name for the current session, if the application sets that name value.
[ASCII]
declaration=character_expression
category=String
description=Returns the ASCII code value of the leftmost character of a character expression
[ASIN]
declaration=float_expression
category=Mathematical
description=A function that returns the angle, in radians, whose sine is the specified float expression. This is also called arcsine.
[ASSEMBLYPROPERTY]
declaration=assembly_name,property_name
category=Metadata
description=This function returns information about a property of an assembly.
[ASYMKEYPROPERTY]
declaration=Key_ID,'algorithm_desc','string_sid','sid'
category=Cryptographic
description=This function returns the properties of an asymmetric key.
[ASYMKEY_ID]
declaration=Asym_Key_Name
category=Cryptographic
description=Returns the ID of an asymmetric key.
[ATAN]
declaration=float_expression
category=Mathematical
description=A function that returns the angle, in radians, whose tangent is a specified float expression. This is also called arctangent.
[ATN2]
declaration=float_expression
category=Mathematical
description=Returns the angle, in radians, between the positive x-axis and the ray from the origin to the point (y, x), where x and y are the values of the two specified float expressions.
[AVG]
declaration=all,distinct,expression
category=Aggregate
description=This function returns the average of the values in a group. It ignores null values
[BINARY_CHECKSUM]
declaration=***
category=System
description=Returns the binary checksum value computed over a row of a table or over a list of expressions.
[CAST AND CONVERT]
declaration=expression,data_type,length,style
category=Conversion
description=These functions convert an expression of one data type to another.
[CEILING]
declaration=numeric_expression
category=Mathematical
description=This function returns the smallest integer greater than, or equal to, the specified numeric expression.
[CERTENCODED]
declaration=cert_id
category=Security
description=This function returns the public portion of a certificate in binary format. This function takes a certificate ID as an argument, and returns the encoded certificate. To create a new certificate, pass the binary result to CREATE CERTIFICATE … WITH BINARY.
[CERTPRIVATEKEY]
declaration=certificate_ID,encryption_password,decryption_password
category=Security
description=This function returns the private key of a certificate in binary format. This function takes three arguments.
[CERTPROPERTY]
declaration=Cert_ID,Expiry_Date,Start_Date,Issuer_Name,Cert_Serial_Number,Subject,SID,String_SID
category=Cryptographic
description=Returns the value of a specified certificate property.
[CERT_ID]
declaration=
category=Cryptographic
description=This function returns the ID value of a certificate.
[CHARINDEX]
declaration=expressionToFind,expressionToSearch,start_location
category=String
description=This function searches for one character expression inside a second character expression, returning the starting position of the first expression if found.
[CHAR]
declaration=integer_expression
category=String
description=This function converts an int ASCII code to a character value.
[CHECKSUM]
declaration=*
category=System
description=The CHECKSUM function returns the checksum value computed over a table row, or over an expression list. Use CHECKSUM to build hash indexes.
[CHECKSUM_AGG]
declaration=ALL,DISTINCT,expression
category=Aggregate
description=This function returns the checksum of the values in a group. CHECKSUM_AGG ignores null values. The OVER clause can follow CHECKSUM_AGG.
[CHOOSE]
declaration=index,val_1 … val_n
category=Logical
description=Returns the item at the specified index from a list of values in SQL Server.
[COLLATIONPROPERTY]
declaration=collation_name,property
category=Collation
description=This function returns the property of a specified collation in SQL Server 2017.
[COLUMNPROPERTY]
declaration=id,column,property
category=Metadata
description=This function returns column or parameter information.
[COLUMNS_UPDATED]
declaration=
category=Trigger
description=This function returns a varbinary bit pattern indicating the inserted or updated columns of a table or view. Use COLUMNS_UPDATED anywhere inside the body of a Transact-SQL INSERT or UPDATE trigger to test whether the trigger should execute certain actions.
[COL_LENGTH]
declaration=' table ',' column '
category=Metadata
description=This function returns the defined length of a column, in bytes.
[COL_NAME]
declaration=table_id,column_id
category=Metadata
description=This function returns the name of a table column, based on the table identification number and column identification number values of that table column.
[COMPRESS]
declaration=expression
category=System
description=This function compresses the input expression, using the GZIP algorithm. The function returns a byte array of type varbinary(max).
[CONCAT]
declaration=string_value
category=String
description=This function returns a string resulting from the concatenation, or joining, of two or more string values in an end-to-end manner. (To add a separating value during concatenation, see CONCAT_WS.)
[CONCAT_WS]
declaration=separator,argument1, argument2, argumentN
category=String
description=This function returns a string resulting from the concatenation, or joining, of two or more string values in an end-to-end manner. It separates those concatenated string values with the delimiter specified in the first function argument. (CONCAT_WS indicates concatenate with separator.)
[CONNECTIONPROPERTY]
declaration=property
category=System
description=For a request that comes in to the server, this function returns information about the connection properties of the unique connection which supports that request.
[CONTEXT_INFO]
declaration=
category=System
description=This function returns the context_info value either set for the current session or batch, or derived through use of the SET CONTEXT_INFO statement.
[COS]
declaration=float_expression
category=Mathematical
description=A mathematical function that returns the trigonometric cosine of the specified angle - measured in radians - in the specified expression.
[COT]
declaration=float_expression
category=Mathematical
description=A mathematical function that returns the trigonometric cotangent of the specified angle - in radians - in the specified float expression.
[COUNT]
declaration=all,distinct,expression,*
category=Aggregate
description=This function returns the number of items found in a group
[COUNT_BIG]
declaration=ALL,DISTINCT,expression,***,OVER ( [ partition_by_clause ] [ order_by_clause ] )
category=Aggregate
description=This function returns the number of items found in a group. COUNT_BIG operates like the COUNT function. These functions differ only in the data types of their return values. COUNT_BIG always returns a bigint data type value. COUNT always returns an int data type value.
[CRYPT_GEN_RANDOM]
declaration=length,seed
category=Cryptographic
description=This function returns a cryptographic, randomly-generated number, generated by the Crypto API (CAPI). CRYPT_GEN_RANDOM returns a hexadecimal number with a length of a specified number of bytes.
[CUME_DIST]
declaration=
category=Analytic
description=For SQL Server, this function calculates the cumulative distribution of a value within a group of values. In other words, CUME_DIST calculates the relative position of a specified value in a group of values. Assuming ascending ordering, the CUME_DIST of a value in row r is defined as the number of rows with values less than or equal to that value in row r, divided by the number of rows evaluated in the partition or query result set. CUME_DIST is similar to the PERCENT_RANK function.
[CURRENT_REQUEST_ID]
declaration=
category=System
description=This function returns the ID of the current request within the current session.
[CURRENT_TIMESTAMP]
declaration=
category=Date and time
description=This function returns the current database system timestamp as a datetime value, without the database time zone offset. CURRENT_TIMESTAMP derives this value from the operating system of the computer on which the instance of SQL Server runs.
[CURRENT_TRANSACTION_ID]
declaration=
category=System
description=This function returns the transaction ID of the current transaction in the current session.
[CURRENT_USER]
declaration=
category=Security
description=This function returns the name of the current user. This function is equivalent to USER_NAME().
[CURSOR_STATUS]
declaration='local','cursor_name','global','variable','cursor_variable'
category=Cursor
description=For a given parameter, CURSOR_STATUS shows whether or not a cursor declaration has returned a cursor and result set.
[DATABASEPROPERTYEX]
declaration=database,property
category=Metadata
description=For a specified database in SQL Server, this function returns the current setting of the specified database option or property.
[DATABASE_PRINCIPAL_ID]
declaration=principal_name
category=Metadata
description=This function returns the ID number of a principal in the current database. See Principals (Database Engine) for more information about principals.
[DATALENGTH]
declaration=expression
category=Data type
description=This function returns the number of bytes used to represent any expression.
[DATEADD]
declaration=datepart
category=Date and time
description=This function adds a specified number value (as a signed integer) to a specified datepart of an input date value, and then returns that modified value.
[DATEDIFF]
declaration=datepart
category=Date and time
description=This function returns the count (as a signed integer value) of the specified datepart boundaries crossed between the specified startdate and enddate.
[DATEDIFF_BIG]
declaration=datepart
category=Date and time
description=This function returns the count (as a signed big integer value) of the specified datepart boundaries crossed between the specified startdate and enddate.
[DATEFROMPARTS]
declaration=year,month,day
category=Date and time
description=This function returns a date value that maps to the specified year, month, and day values.
[DATENAME]
declaration=datepart
category=Date and time
description=This function returns a character string representing the specified datepart of the specified date.
[DATEPART]
declaration=datepart
category=Date and time
description=This function returns an integer representing the specified datepart of the specified date.
[DATETIME2FROMPARTS]
declaration=year,month,day,hour,minute,seconds,fractions,precision
category=Date and time
description=This function returns a datetime2 value for the specified date and time arguments. The returned value has a precision specified by the precision argument.
[DATETIMEFROMPARTS]
declaration=year,month,day,hour,minute,seconds,milliseconds
category=Date and time
description=This function returns a datetime value for the specified date and time arguments.
[DATETIMEOFFSETFROMPARTS]
declaration=year,month,day,hour,minute,seconds,fractions,hour_offset,minute_offset,precision
category=Date and time
description=Returns a datetimeoffset value for the specified date and time arguments. The returned value has a precision specified by the precision argument, and an offset as specified by the offset arguments.
[DAY]
declaration=date
category=Date and time
description=This function returns an integer that represents the day (day of the month) of the specified date.
[DB_ID]
declaration='database_name'
category=Metadata
description=This function returns the database identification (ID) number of a specified database.
[DB_NAME]
declaration=
category=Metadata
description=This function returns the name of a specified database.
[DECOMPRESS]
declaration=expression
category=System
description=This function will decompress an input expression value, using the GZIP algorithm. DECOMPRESS will return a byte array (VARBINARY(MAX) type).
[DECRYPTBYASYMKEY]
declaration=Asym_Key_ID,ciphertext,@ciphertext,Asym_Key_Password
category=Cryptographic
description=This function uses an asymmetric key to decrypt encrypted data.
[DECRYPTBYCERT]
declaration=certificate_ID,ciphertext,@ciphertext,cert_password,@cert_password
category=Cryptographic
description=This function uses the private key of a certificate to decrypt encrypted data.
[DECRYPTBYKEYAUTOASYMKEY]
declaration=akey_ID,akey_password,@ciphertext,add_authenticator,@add_authenticator,authenticator,@authenticator,@add_authenticator,authenticator,@authenticator
category=Cryptographic
description=This function decrypts encrypted data. To do this, it first decrypts a symmetric key with a separate asymmetric key, and then decrypts the encrypted data with the symmetric key extracted in the first "step".
[DECRYPTBYKEYAUTOCERT]
declaration=cert_ID,cert_password,'ciphertext',@ciphertext,add_authenticator,@add_authenticator,authenticator,@authenticator
category=Cryptographic
description=This function decrypts data with a symmetric key. That symmetric key automatically decrypts with a certificate.
[DECRYPTBYKEY]
declaration=ciphertext,@ciphertext,add_authenticator,authenticator,@authenticator
category=Cryptographic
description=This function uses a symmetric key to decrypt data.
[DECRYPTBYPASSPHRASE]
declaration=passphrase,@passphrase
category=Cryptographic
description=This function decrypts data originally encrypted with a passphrase.
[DEGREES]
declaration=numeric_expression
category=Mathematical
description=This function returns the corresponding angle, in degrees, for an angle specified in radians.
[DENSE_RANK]
declaration=&lt;partition_by_clause&gt;,&lt;order_by_clause&gt;
category=Ranking
description=This function returns the rank of each row within a result set partition, with no gaps in the ranking values. The rank of a specific row is one plus the number of distinct rank values that come before that specific row.
[DIFFERENCE]
declaration=character_expression
category=String
description=This function returns an integer value measuring the difference between the SOUNDEX() values of two different character expressions.
[ENCRYPTBYASYMKEY]
declaration=asym_key_ID,cleartext
category=Cryptographic
description=This function encrypts data with an asymmetric key.
[ENCRYPTBYCERT]
declaration=certificate_ID,cleartext,@cleartext
category=Cryptographic
description=Encrypts data with the public key of a certificate.
[ENCRYPTBYKEY]
declaration=key_GUID,'cleartext',@cleartext,add_authenticator,@add_authenticator,authenticator,@authenticator
category=Cryptographic
description=Encrypts data by using a symmetric key.
[ENCRYPTBYPASSPHRASE]
declaration=passphrase,@passphrase,cleartext,@cleartext,add_authenticator,@add_authenticator,authenticator,@authenticator
category=Cryptographic
description=Encrypt data with a passphrase using the TRIPLE DES algorithm with a 128 key bit length.
[EOMONTH]
declaration=start_date,month_to_add
category=Date and time
description=This function returns the last day of the month containing a specified date, with an optional offset.
[ERROR_LINE]
declaration=
category=System
description=This function returns the line number of occurrence of an error that caused the CATCH block of a TRY…CATCH construct to execute.
[ERROR_MESSAGE]
declaration=
category=System
description=This function returns the message text of the error that caused the CATCH block of a TRY…CATCH construct to execute.
[ERROR_NUMBER]
declaration=
category=System
description=This function returns the error number of the error that caused the CATCH block of a TRY…CATCH construct to execute.
[ERROR_PROCEDURE]
declaration=
category=System
description=This function returns the name of the stored procedure or trigger where an error occurs, if that error caused the CATCH block of a TRY…CATCH construct to execute.
[ERROR_SEVERITY]
declaration=
category=System
description=This function returns the severity value of the error where an error occurs, if that error caused the CATCH block of a TRY…CATCH construct to execute.
[ERROR_STATE]
declaration=
category=System
description=Returns the state number of the error that caused the CATCH block of a TRY…CATCH construct to be run.
[EVENTDATA]
declaration=
category=Trigger
description=This function returns information about server or database events. When an event notification fires, and the specified service broker receives the results, EVENTDATA is called. A DDL or logon trigger also support internal use of EVENTDATA.
[EXP]
declaration=float_expression
category=Mathematical
description=Returns the exponential value of the specified float expression.
[FILEGROUPPROPERTY]
declaration=filegroup_name,property
category=Metadata
description=This function returns the filegroup property value for a specified name and filegroup value.
[FILEGROUP_ID]
declaration=
category=Metadata
description=This function returns the filegroup identification (ID) number for a specified filegroup name.
[FILEGROUP_NAME]
declaration=
category=Metadata
description=This function returns the filegroup name for the specified filegroup identification (ID) number.
[FILEPROPERTY]
declaration=file_name,property
category=Metadata
description=Returns the specified file name property value when a file name in the current database and a property name are specified. Returns NULL for files that are not in the current database.
[FILE_IDEX]
declaration=file_name
category=Metadata
description=This function returns the file identification (ID) number for the specified logical name of a data, log, or full-text file of the current database.
[FILE_ID]
declaration=file_name
category=Metadata
description=For the given logical name for a component file of the current database, this function returns the file identification (ID) number.
[FILE_NAME]
declaration=file_id
category=Metadata
description=This function returns the logical file name for a given file identification (ID) number.
[FIRST_VALUE]
declaration=scalar_expression,OVER ( [ partition_by_clause ] order_by_clause [ rows_range_clause ] )
category=Analytic
description=Returns the first value in an ordered set of values in SQL Server 2017.
[FLOOR]
declaration=numeric_expression
category=Mathematical
description=Returns the largest integer less than or equal to the specified numeric expression.
[FORMATMESSAGE]
declaration=msg_number,msg_string,param_value
category=System
description=Constructs a message from an existing message in sys.messages or from a provided string. The functionality of FORMATMESSAGE resembles that of the RAISERROR statement. However, RAISERROR prints the message immediately, while FORMATMESSAGE returns the formatted message for further processing.
[FORMAT]
declaration=value,format,culture
category=String
description=Returns a value formatted with the specified format and optional culture in SQL Server 2017. Use the FORMAT function for locale-aware formatting of date/time and number values as strings. For general data type conversions, use CAST or CONVERT.
[FULLTEXTCATALOGPROPERTY]
declaration=
category=Metadata
description=Returns information about full-text catalog properties in SQL Server 2017.
[FULLTEXTSERVICEPROPERTY]
declaration=property
category=Metadata
description=Returns information related to the properties of the Full-Text Engine. These properties can be set and retrieved by using sp_fulltext_service.
[GETANSINULL]
declaration='database'
category=System
description=Returns the default nullability for the database for this session.
[GETDATE]
declaration=
category=Date and time
description=Returns the current database system timestamp as a datetime value without the database time zone offset. This value is derived from the operating system of the computer on which the instance of SQL Server is running.
[GETUTCDATE]
declaration=
category=Date and time
description=Returns the current database system timestamp as a datetime value. The database time zone offset is not included. This value represents the current UTC time (Coordinated Universal Time). This value is derived from the operating system of the computer on which the instance of SQL Server is running.
[GET_FILESTREAM_TRANSACTION_CONTEXT]
declaration=
category=System
description=Returns a token that represents the current transaction context of a session. The token is used by an application to bind FILESTREAM file-system streaming operations to the transaction. For a list of FILESTREAM topics, see Binary Large Object (Blob) Data (SQL Server).
[GROUPING]
declaration=&lt;column_expression&gt;
category=Aggregate
description=Indicates whether a specified column expression in a GROUP BY list is aggregated or not. GROUPING returns 1 for aggregated or 0 for not aggregated in the result set. GROUPING can be used only in the SELECT <select> list, HAVING, and ORDER BY clauses when GROUP BY is specified.
[GROUPING_ID]
declaration=&lt;column_expression&gt;
category=Aggregate
description=Is a function that computes the level of grouping. GROUPING_ID can be used only in the SELECT <select> list, HAVING, or ORDER BY clauses when GROUP BY is specified.
[HASHBYTES]
declaration='&lt;algorithm&gt;',@input,' input '
category=Cryptographic
description=Returns the MD2, MD4, MD5, SHA, SHA1, or SHA2 hash of its input in SQL Server.
[HAS_DBACCESS]
declaration='database_name'
category=Security
description=Returns information about whether the user has access to the specified database.
[HAS_PERMS_BY_NAME]
declaration=securable,securable_class,permission,sub-securable
category=Security
description=Evaluates the effective permission of the current user on a securable. A related function is fn_my_permissions.
[HOST_ID]
declaration=
category=System
description=Returns the workstation identification number. The workstation identification number is the process ID (PID) of the application on the client computer that is connecting to SQL Server.
[HOST_NAME]
declaration=
category=System
description=Returns the workstation name.
[IDENTITY (FUNCTION)]
declaration=data_type,seed,increment,column_name
category=Data type
description=Is used only in a SELECT statement with an INTO table clause to insert an identity column into a new table. Although similar, the IDENTITY function is not the IDENTITY property that is used with CREATE TABLE and ALTER TABLE.
[IDENT_CURRENT]
declaration=table_name
category=Data type
description=Returns the last identity value generated for a specified table or view. The last identity value generated can be for any session and any scope.
[IDENT_INCR]
declaration=' table_or_view '
category=Data type
description=Returns the increment value (returned as numeric (@@MAXPRECISION,0)) specified during the creation of an identity column in a table or view that has an identity column.
[IDENT_SEED]
declaration=' table_or_view '
category=Data type
description=Returns the original seed value (returned as numeric(@@MAXPRECISION,0)) that was specified when an identity column in a table or a view was created. Changing the current value of an identity column by using DBCC CHECKIDENT does not change the value returned by this function.
[IIF]
declaration=boolean_expression,true_value,false_value
category=Logical
description=Returns one of two values, depending on whether the Boolean expression evaluates to true or false in SQL Server.
[INDEXKEY_PROPERTY]
declaration=object_ID,index_ID,key_ID,property
category=Metadata
description=Returns information about the index key. Returns NULL for XML indexes.
[INDEXPROPERTY]
declaration=object_ID,index_or_statistics_name,property
category=Metadata
description=Returns the named index or statistics property value of a specified table identification number, index or statistics name, and property name. Returns NULL for XML indexes.
[INDEX_COL]
declaration=database_name,schema_name,table_or_view_name,index_id,key_id
category=Metadata
description=Returns the indexed column name. Returns NULL for XML indexes.
[ISDATE]
declaration=expression
category=Date and time
description=Returns 1 if the expression is a valid date, time, or datetime value; otherwise, 0.
[ISJSON]
declaration=expression
category=JSON
description=Tests whether a string contains valid JSON.
[ISNULL]
declaration=check_expression,replacement_value
category=System
description=Replaces NULL with the specified replacement value.
[ISNUMERIC]
declaration=expression
category=System
description=Determines whether an expression is a valid numeric type.
[IS_MEMBER]
declaration=' group ',' role '
category=Security
description=Indicates whether the current user is a member of the specified Microsoft Windows group or SQL Server database role.
[IS_OBJECTSIGNED]
declaration='OBJECT',@object_id,@class
category=Cryptographic
description=Indicates whether an object is signed by a specified certificate or asymmetric key.
[IS_ROLEMEMBER]
declaration=' role ',' database_principal '
category=Security
description=Indicates whether a specified database principle is a member of the specified database role.
[IS_SRVROLEMEMBER]
declaration=' role '
category=Security
description=Indicates whether a SQL Server login is a member of the specified server role.
[JSON_MODIFY]
declaration=expression,path
category=JSON
description=Updates the value of a property in a JSON string and returns the updated JSON string.
[JSON_QUERY]
declaration=expression,path
category=JSON
description=Extracts an object or an array from a JSON string.
[JSON_VALUE]
declaration=expression,path
category=JSON
description=Extracts a scalar value from a JSON string.
[KEY_GUID]
declaration=' Key_Name '
category=Cryptographic
description=Returns the GUID of a symmetric key in the database.
[KEY_ID]
declaration=' Key_Name '
category=Cryptographic
description=Returns the ID of a symmetric key in the current database.
[KEY_NAME]
declaration=ciphertext,key_guid
category=Cryptographic
description=Returns the name of the symmetric key from either a symmetric key GUID or cipher text.
[LAG]
declaration=scalar_expression,offset,default
category=Analytic
description=Accesses data from a previous row in the same result set without the use of a self-join starting with SQL Server 2012 (11.x).
[LAST_VALUE]
declaration=scalar_expression,OVER ( [ partition_by_clause ] order_by_clause [ rows_range_clause ] )
category=Analytic
description=Returns the last value in an ordered set of values in SQL Server 2017.
[LEAD]
declaration=scalar_expression,offset,default,OVER ( [ partition_by_clause ] order_by_clause)
category=Analytic
description=Accesses data from a subsequent row in the same result set without the use of a self-join starting with SQL Server 2012 (11.x). LEAD provides access to a row at a given physical offset that follows the current row. Use this analytic function in a SELECT statement to compare values in the current row with values in a following row.
[LEFT]
declaration=character_expression,integer_expression
category=String
description=Returns the left part of a character string with the specified number of characters.
[LEN]
declaration=string_expression
category=String
description=Returns the number of characters of the specified string expression, excluding trailing blanks.
[LOG10]
declaration=float_expression
category=Mathematical
description=Returns the base-10 logarithm of the specified float expression.
[LOGINPROPERTY]
declaration=login_name,propertyname
category=Security
description=Returns information about login policy settings.
[LOG]
declaration=float_expression,base
category=Mathematical
description=Returns the natural logarithm of the specified float expression in SQL Server.
[LOWER]
declaration=character_expression
category=String
description=Returns a character expression after converting uppercase character data to lowercase.
[LTRIM]
declaration=character_expression
category=String
description=Returns a character expression after it removes leading blanks.
[MAX]
declaration=ALL,DISTINCT,expression,OVER ( [ partition_by_clause ] order_by_clause)
category=Aggregate
description=Returns the maximum value in the expression.
[MIN]
declaration=ALL,DISTINCT,expression,OVER ( [ partition_by_clause ] order_by_clause)
category=Aggregate
description=Returns the minimum value in the expression. May be followed by the OVER clause.
[MIN_ACTIVE_ROWVERSION]
declaration=
category=System
description=Returns the lowest active rowversion value in the current database. A rowversion value is active if it is used in a transaction that has not yet been committed. For more information, see rowversion (Transact-SQL).
[MONTH]
declaration=date
category=Date and time
description=Returns an integer that represents the month of the specified date.
[NCHAR]
declaration=integer_expression
category=String
description=Returns the Unicode character with the specified integer code, as defined by the Unicode standard.
[NEWID]
declaration=
category=System
description=Creates a unique value of type uniqueidentifier.
[NEWSEQUENTIALID]
declaration=
category=System
description=Creates a GUID that is greater than any GUID previously generated by this function on a specified computer since Windows was started. After restarting Windows, the GUID can start again from a lower range, but is still globally unique. When a GUID column is used as a row identifier, using NEWSEQUENTIALID can be faster than using the NEWID function. This is because the NEWID function causes random activity and uses fewer cached data pages. Using NEWSEQUENTIALID also helps to completely fill the data and index pages.
[NEXT VALUE FOR]
declaration=database_name,schema_name,sequence_name,over_order_by_clause
category=Metadata
description=Generates a sequence number from the specified sequence object.
[NTILE]
declaration=integer_expression,&lt;partition_by_clause&gt;,&lt;order_by_clause&gt;
category=Ranking
description=Distributes the rows in an ordered partition into a specified number of groups. The groups are numbered, starting at one. For each row, NTILE returns the number of the group to which the row belongs.
[OBJECTPROPERTYEX]
declaration=id,property
category=Metadata
description=Returns information about schema-scoped objects in the current database. For a list of these objects, see sys.objects (Transact-SQL). OBJECTPROPERTYEX cannot be used for objects that are not schema-scoped, such as data definition language (DDL) triggers and event notifications.
[OBJECTPROPERTY]
declaration=id,property
category=Metadata
description=Returns information about schema-scoped objects in the current database. For a list of schema-scoped objects, see sys.objects (Transact-SQL). This function cannot be used for objects that are not schema-scoped, such as data definition language (DDL) triggers and event notifications.
[OBJECT_DEFINITION]
declaration=object_id
category=Metadata
description=Returns the Transact-SQL source text of the definition of a specified object.
[OBJECT_ID]
declaration=' object_name ',' object_type '
category=Metadata
description=Returns the database object identification number of a schema-scoped object.
[OBJECT_NAME]
declaration=object_id,database_id
category=Metadata
description=Returns the database object name for schema-scoped objects. For a list of schema-scoped objects, see sys.objects (Transact-SQL).
[OBJECT_SCHEMA_NAME]
declaration=object_id,database_id
category=Metadata
description=Returns the database schema name for schema-scoped objects. For a list of schema-scoped objects, see sys.objects (Transact-SQL).
[OPENDATASOURCE]
declaration=provider_name,init_string
category=Rowset
description=Provides ad hoc connection information as part of a four-part object name without using a linked server name.
[OPENJSON]
declaration=
category=Rowset
description=OPENJSON is a table-valued function that parses JSON text and returns objects and properties from the JSON input as rows and columns. In other words, OPENJSON provides a rowset view over a JSON document. You can explicitly specify the columns in the rowset and the JSON property paths used to populate the columns. Since OPENJSON returns a set of rows, you can use OPENJSON in the FROM clause of a Transact-SQL statement just as you can use any other table, view, or table-valued function.
[OPENQUERY]
declaration=linked_server,' query '
category=Rowset
description=Executes the specified pass-through query on the specified linked server. This server is an OLE DB data source. OPENQUERY can be referenced in the FROM clause of a query as if it were a table name. OPENQUERY can also be referenced as the target table of an INSERT, UPDATE, or DELETE statement. This is subject to the capabilities of the OLE DB provider. Although the query may return multiple result sets, OPENQUERY returns only the first one.
[OPENROWSET]
declaration='provider_name','datasource','user_id','password','provider_string',catalog,schema,object,'query',BULK
category=Rowset
description=Includes all connection information that is required to access remote data from an OLE DB data source. This method is an alternative to accessing tables in a linked server and is a one-time, ad hoc method of connecting and accessing remote data by using OLE DB. For more frequent references to OLE DB data sources, use linked servers instead. For more information, see Linked Servers (Database Engine). The OPENROWSET function can be referenced in the FROM clause of a query as if it were a table name. The OPENROWSET function can also be referenced as the target table of an INSERT, UPDATE, or DELETE statement, subject to the capabilities of the OLE DB provider. Although the query might return multiple result sets, OPENROWSET returns only the first one.
[OPENXML]
declaration=idoc,rowpattern,flags
category=Rowset
description=OPENXML provides a rowset view over an XML document
[ORIGINAL_DB_NAME]
declaration=
category=Metadata
description=Returns the database name that is specified by the user in the database connection string. This is the database that is specified by using the sqlcmd-d option (USE database) or the ODBC data source expression (initial catalog =databasename).
[ORIGINAL_LOGIN]
declaration=
category=Security
description=Returns the name of the login that connected to the instance of SQL Server. You can use this function to return the identity of the original login in sessions in which there are many explicit or implicit context switches.
[PARSENAME]
declaration='object_name',object_piece
category=Metadata
description=Returns the specified part of an object name. The parts of an object that can be retrieved are the object name, owner name, database name, and server name.
[PARSE]
declaration=string_value,data_type,culture
category=Conversion
description=Returns the result of an expression, translated to the requested data type in SQL Server.
[PATINDEX]
declaration=pattern,expression
category=String
description=Returns the starting position of the first occurrence of a pattern in a specified expression, or zeros if the pattern is not found, on all valid text and character data types.
[PERCENTILE_CONT]
declaration=numeric_literal,WITHIN GROUP ( ORDER BY order_by_expression [ ASC | DESC ]),OVER ( &lt;partition_by_clause&gt; )
category=Analytic
description=Calculates a percentile based on a continuous distribution of the column value in SQL Server. The result is interpolated and might not be equal to any of the specific values in the column.
[PERCENTILE_DISC]
declaration=literal,WITHIN GROUP ( ORDER BY order_by_expression [ ASC | DESC ]),OVER ( &lt;partition_by_clause&gt; )
category=Analytic
description=Computes a specific percentile for sorted values in an entire rowset or within distinct partitions of a rowset in SQL Server. For a given percentile value P, PERCENTILE_DISC sorts the values of the expression in the ORDER BY clause and returns the value with the smallest CUME_DIST value (with respect to the same sort specification) that is greater than or equal to P. For example, PERCENTILE_DISC (0.5) will compute the 50th percentile (that is, the median) of an expression. PERCENTILE_DISC calculates the percentile based on a discrete distribution of the column values; the result is equal to a specific value in the column.
[PERCENT_RANK]
declaration=OVER ( [ partition_by_clause ] order_by_clause)
category=Analytic
description=Calculates the relative rank of a row within a group of rows in SQL Server 2017. Use PERCENT_RANK to evaluate the relative standing of a value within a query result set or partition. PERCENT_RANK is similar to the CUME_DIST function.
[PERMISSIONS]
declaration=objectid,' column '
category=Security
description=Returns a value containing a bitmap that indicates the statement, object, or column permissions of the current user.
[PI]
declaration=
category=Mathematical
description=Returns the constant value of PI.
[POWER]
declaration=float_expression,y
category=Mathematical
description=Returns the value of the specified expression to the specified power.
[PUBLISHINGSERVERNAME]
declaration=
category=Replication
description=Returns the name of the originating Publisher for a published database participating in a database mirroring session. This function is executed at a Publisher instance of SQL Server on the publication database. Use it to determine the original Publisher of the published database.
[PWDCOMPARE]
declaration=' clear_text_password ',password_hash,version
category=Security
description=Hashes a password and compares the hash to the hash of an existing password. PWDCOMPARE can be used to search for blank SQL Server login passwords or common weak passwords.
[PWDENCRYPT]
declaration=password
category=Security
description=Returns the SQL Server password hash of the input value that uses the current version of the password hashing algorithm.
[QUOTENAME]
declaration='character_string','quote_character'
category=String
description=Returns a Unicode string with the delimiters added to make the input string a valid SQL Server delimited identifier.
[RADIANS]
declaration=numeric_expression
category=Mathematical
description=Returns radians when a numeric expression, in degrees, is entered.
[RAND]
declaration=seed
category=Mathematical
description=Returns a pseudo-random float value from 0 through 1, exclusive.
[RANK]
declaration=OVER ( [ partition_by_clause ] order_by_clause)
category=Ranking
description=Returns the rank of each row within the partition of a result set. The rank of a row is one plus the number of ranks that come before the row in question.
[REPLACE]
declaration=string_expression,string_pattern,string_replacement
category=String
description=Replaces all occurrences of a specified string value with another string value.
[REPLICATE]
declaration=string_expression
category=String
description=Repeats a string value a specified number of times.
[REVERSE]
declaration=string_expression
category=String
description=Returns the reverse order of a string value.
[RIGHT]
declaration=character_expression,integer_expression
category=String
description=Returns the right part of a character string with the specified number of characters.
[ROUND]
declaration=numeric_expression,length,function
category=Mathematical
description=Returns a numeric value, rounded to the specified length or precision.
[ROWCOUNT_BIG]
declaration=
category=System
description=Returns the number of rows affected by the last statement executed. This function operates like @@ROWCOUNT, except the return type of ROWCOUNT_BIG is bigint.
[ROW_NUMBER]
declaration=PARTITION BY value_expression,order_by_clause
category=Ranking
description=Numbers the output of a result set. More specifically, returns the sequential number of a row within a partition of a result set, starting at 1 for the first row in each partition.
[RTRIM]
declaration=character_expression
category=String
description=Returns a character string after truncating all trailing spaces.
[SCHEMA_ID]
declaration=
category=Metadata
description=Returns the schema ID associated with a schema name.
[SCHEMA_NAME]
declaration=
category=Metadata
description=Returns the schema name associated with a schema ID.
[SCOPE_IDENTITY]
declaration=
category=Metadata
description=Returns the last identity value inserted into an identity column in the same scope. A scope is a module: a stored procedure, trigger, function, or batch. Therefore, if two statements are in the same stored procedure, function, or batch, they are in the same scope.
[SERVERPROPERTY]
declaration=propertyname
category=Metadata
description=Returns property information about the server instance.
[SESSIONPROPERTY]
declaration=option
category=Security
description=Returns the SET options settings of a session.
[SESSION_CONTEXT]
declaration='key'
category=System
description=Returns the value of the specified key in the current session context. The value is set by using the sp_set_session_context (Transact-SQL) procedure.
[SESSION_USER]
declaration=
category=Security
description=SESSION_USER returns the user name of the current context in the current database.
[SIGNBYASYMKEY]
declaration=Asym_Key_ID,@plaintext,password
category=Cryptographic
description=Signs plaintext with an asymmetric key
[SIGNBYCERT]
declaration=certificate_ID,@cleartext,' password '
category=Cryptographic
description=Signs text with a certificate and returns the signature.
[SIGN]
declaration=numeric_expression
category=Mathematical
description=Returns the positive (+1), zero (0), or negative (-1) sign of the specified expression.
[SIN]
declaration=float_expression
category=Mathematical
description=Returns the trigonometric sine of the specified angle, in radians, and in an approximate numeric, float, expression.
[SMALLDATETIMEFROMPARTS]
declaration=year,month,day,hour,minute
category=Date and time
description=Returns a smalldatetime value for the specified date and time.
[SOUNDEX]
declaration=character_expression
category=String
description=Returns a four-character (SOUNDEX) code to evaluate the similarity of two strings.
[SPACE]
declaration=integer_expression
category=String
description=Returns a string of repeated spaces.
[SQL_VARIANT_PROPERTY]
declaration=expression,property
category=Data type
description=Returns the base data type and other information about a sql_variant value.
[SQRT]
declaration=float_expression
category=Mathematical
description=Returns the square root of the specified float value.
[SQUARE]
declaration=float_expression
category=Mathematical
description=Returns the square of the specified float value.
[STATS_DATE]
declaration=object_id,stats_id
category=Metadata
description=Returns the date of the most recent update for statistics on a table or indexed view.
[STDEVP]
declaration=ALL,DISTINCT,expression,OVER ( [ partition_by_clause ] order_by_clause)
category=Aggregate
description=Returns the statistical standard deviation for the population for all values in the specified expression.
[STDEV]
declaration=ALL,DISTINCT,expression,OVER ( [ partition_by_clause ] order_by_clause)
category=Aggregate
description=Returns the statistical standard deviation of all values in the specified expression.
[STRING_AGG]
declaration=expression,separator,&lt;order_clause&gt;
category=String
description=Concatenates the values of string expressions and places separator values between them. The separator is not added at the end of string.
[STRING_ESCAPE]
declaration=text,type
category=String
description=Escapes special characters in texts and returns text with escaped characters. STRING_ESCAPE is a deterministic function.
[STRING_SPLIT]
declaration=string,separator
category=String
description=Splits the character expression using specified separator.
[STR]
declaration=float_expression,length,decimal
category=String
description=Returns character data converted from numeric data.
[STUFF]
declaration=character_expression,start,length,replaceWith_expression
category=String
description=The STUFF function inserts a string into another string. It deletes a specified length of characters in the first string at the start position and then inserts the second string into the first string at the start position.
[SUBSTRING]
declaration=expression,start,length
category=String
description=Returns part of a character, binary, text, or image expression in SQL Server.
[SUM]
declaration=ALL,DISTINCT,expression,OVER ( [ partition_by_clause ] order_by_clause)
category=Aggregate
description=Returns the sum of all the values, or only the DISTINCT values, in the expression. SUM can be used with numeric columns only. Null values are ignored.
[SUSER_ID]
declaration=' login '
category=Security
description=Returns the login identification number of the user.
[SUSER_NAME]
declaration=server_user_id
category=Security
description=Returns the login identification name of the user.
[SUSER_SID]
declaration=' login ',Param2
category=Security
description=Returns the security identification number (SID) for the specified login name.
[SUSER_SNAME]
declaration=server_user_sid
category=Security
description=Returns the login name associated with a security identification number (SID).
[SWITCHOFFSET]
declaration=DATETIMEOFFSET,time_zone
category=Date and time
description=Returns a datetimeoffset value that is changed from the stored time zone offset to a specified new time zone offset.
[SYMKEYPROPERTY]
declaration=Key_ID,'algorithm_desc'
category=Cryptographic
description=Returns the algorithm of a symmetric key created from an EKM module.
[SYSDATETIMEOFFSET]
declaration=
category=Date and time
description=Returns a datetimeoffset(7) value that contains the date and time of the computer on which the instance of SQL Server is running. The time zone offset is included.
[SYSDATETIME]
declaration=
category=Date and time
description=Returns a datetime2(7) value that contains the date and time of the computer on which the instance of SQL Server is running.
[SYSTEM_USER]
declaration=
category=Security
description=Allows a system-supplied value for the current login to be inserted into a table when no default value is specified.
[SYSUTCDATETIME]
declaration=
category=Date and time
description=Returns a datetime2 value that contains the date and time of the computer on which the instance of SQL Server is running. The date and time is returned as UTC time (Coordinated Universal Time). The fractional second precision specification has a range from 1 to 7 digits. The default precision is 7 digits.
[TAN]
declaration=float_expression
category=Mathematical
description=Returns the tangent of the input expression.
[TERTIARY_WEIGHTS]
declaration=non_Unicode_character_string_expression
category=Collation
description=For each character in a non-Unicode string expression - defined with a SQL tertiary collation - this function returns a binary string of weights.
[TEXTPTR]
declaration=column
category=Text and Image
description=Returns the text-pointer value that corresponds to a text, ntext, or image column in varbinary format. The retrieved text pointer value can be used in READTEXT, WRITETEXT, and UPDATETEXT statements.
[TEXTVALID]
declaration=table,column,text_ptr
category=Text and Image
description=A text, ntext, or image function that checks whether a specific text pointer is valid.
[TIMEFROMPARTS]
declaration=hour,minute,seconds,fractions,precision
category=Date and time
description=Returns a time value for the specified time and with the specified precision.
[TODATETIMEOFFSET]
declaration=expression
category=Date and time
description=Returns a datetimeoffset value that is translated from a datetime2 expression.
[TRANSLATE]
declaration=inputString,characters,translations
category=String
description=Returns the string provided as a first argument after some characters specified in the second argument are translated into a destination set of characters.
[TRIGGER_NESTLEVEL]
declaration=object_id,' trigger_type ',' trigger_event_category '
category=Trigger
description=Returns the number of triggers executed for the statement that fired the trigger. TRIGGER_NESTLEVEL is used in DML and DDL triggers to determine the current level of nesting.
[TRIM]
declaration=characters,string
category=String
description=Removes the space character char(32) or other specified characters from the start or end of a string.
[TRY_CAST]
declaration=expression,data_type,length
category=Conversion
description=Returns a value cast to the specified data type if the cast succeeds; otherwise, returns null.
[TRY_CONVERT]
declaration=data_type [ ( length ) ],expression,style
category=Conversion
description=Returns a value cast to the specified data type if the cast succeeds; otherwise, returns null.
[TRY_PARSE]
declaration=string_value,data_type,culture
category=Conversion
description=Returns the result of an expression, translated to the requested data type, or null if the cast fails in SQL Server. Use TRY_PARSE only for converting from string to date/time and number types.
[TYPEPROPERTY]
declaration=type,property
category=Metadata
description=Returns information about a data type.
[TYPE_ID]
declaration=type_name
category=Metadata
description=Returns the ID for a specified data type name.
[TYPE_NAME]
declaration=type_id
category=Metadata
description=Returns the unqualified type name of a specified type ID.
[UNICODE]
declaration=' ncharacter_expression '
category=String
description=Returns the integer value, as defined by the Unicode standard, for the first character of the input expression.
[UPDATE]
declaration=column
category=Trigger
description=Returns a Boolean value that indicates whether an INSERT or UPDATE attempt was made on a specified column of a table or view. UPDATE() is used anywhere inside the body of a Transact-SQL INSERT or UPDATE trigger to test whether the trigger should execute certain actions.
[UPPER]
declaration=character_expression
category=String
description=Returns a character expression with lowercase character data converted to uppercase.
[USER]
declaration=
category=Security
description=Allows a system-supplied value for the database user name of the current user to be inserted into a table when no default value is specified.
[USER_ID]
declaration=user
category=Security
description=Returns the identification number for a database user.
[USER_NAME]
declaration=id
category=Security
description=Returns a database user name from a specified identification number.
[VARP]
declaration=ALL,DISTINCT,expression,OVER ( [ partition_by_clause ] order_by_clause)
category=Aggregate
description=Returns the statistical variance for the population for all values in the specified expression.
[VAR]
declaration=ALL,DISTINCT,expression,OVER ( [ partition_by_clause ] order_by_clause)
category=Aggregate
description=Returns the statistical variance of all values in the specified expression. May be followed by the OVER clause.
[VERIFYSIGNEDBYASYMKEY]
declaration=Asym_Key_ID,clear_text,signature
category=Cryptographic
description=Tests whether digitally signed data has been changed since it was signed.
[VERIFYSIGNEDBYCERT]
declaration=Cert_ID,signed_data,signature
category=Cryptographic
description=Tests whether digitally signed data has been changed since it was signed.
[XACT_STATE]
declaration=
category=System
description=Is a scalar function that reports the user transaction state of a current running request. XACT_STATE indicates whether the request has an active user transaction, and whether the transaction is capable of being committed.
[YEAR]
declaration=date
category=Date and time
description=Returns an integer that represents the year of the specified date.