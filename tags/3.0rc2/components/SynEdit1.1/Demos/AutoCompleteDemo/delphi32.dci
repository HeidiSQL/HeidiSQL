[arrayd | Array-Deklaration (var)]
array[0..|] of ;

[arrayc | Array-Deklaration (const)]
array[0..|] of = ();

[cases | case-Anweisung]
case | of
  : ;
  : ;
end;
  
[casee | case-Anweisung (mit else)]
case | of
  : ;
  : ;
else ;
end;
  
[classf | Klassendeklaration (mit allen Bestandteilen)]
T| = class(T)
private

protected

public

published 

end;

[classd | Klassendeklaration (keine weiteren Bestandteile)]
T| = class(T)

end;

[classc | Klassendeklaration (mit Überschreiben von Create/Destroy)]
T| = class(T)
private

protected

public
  constructor Create; override;
  destructor Destroy; override;
published 

end;

[fors | for (ohne begin/end)]
for | :=  to  do

[forb | for-Anweisung]
for | :=  to  do
begin

end;

[function | Funktionsdeklaration]
function |(): ;
begin

end;

[ifs | if (ohne begin/end)]
if | then

[ifb | if-Anweisung]
if | then
begin

end;

[ife | if then (ohne begin/end) else (ohne begin/end)]
if | then

else

[ifeb |  if then else]
if | then
begin

end
else
begin

end;

[procedure | Prozedurdeklaration]
procedure |();
begin

end;

[trye |  try except]
try
  | 
except

end;

[tryf |  try finally]
try
  | 
finally

end;

[trycf | try finally (mit Create/Free)]
|variable := typename.Create; 
try

finally
  variable.Free;
end;

[whileb | while-Anweisung]
while | do
begin

end;

[whiles | while (ohne begin)]
while | do

[withb | with-Anweisung]
with | do
begin

end;

[withs | with (ohne begin)]
with | do

[set | settings.inc]
{$I settings.inc}
|
