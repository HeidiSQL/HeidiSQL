  import java.awt.BorderLayout;
  import java.awt.Dimension;
  import java.awt.Insets;
  import java.awt.event.*;
  
  import javax.swing.*;
  import javax.swing.border.*;
  
  log.debug("task is long running!");
  
  WindowContext context = argObj("windowContext");
  Worker worker = argObj("worker");
  
  String message = arg("waitOperation");
  
  StatusBar statusBar = context.get("/statusBar");
  JLabel text = statusBar.get("Ready");
  ProgressBar pbar = statusBar.get("pbar");
  Button btn = statusBar.get("stop");
  Stack messages = statusBar.getProperty("messages");
  Stack workers = statusBar.getProperty("workers");
  Runnable preloadIfLazy = argObj("preloadIfLazy");
  
  if (preloadIfLazy != null)
  {
    preloadIfLazy.run();
  }
   
  synchronized (this.getClass())
  {
    if ( text == null )
    {
       text = (JLabel)statusBar.getComponent(0);
       statusBar.setProperty("text", text);
    }
    
    if ( messages == null )
    {
       messages = new Stack();
       statusBar.setProperty("messages", messages);
    }
    
    if ( workers == null )
    {
       workers = new Stack();
       statusBar.setProperty("workers", workers);
    }
    
    if ( pbar == null )
    {
      pbar = new ProgressBar();
      pbar.setIndeterminate(true);
      pbar.setPreferredSize(new Dimension(100, 17));
      pbar.setName("pbar");
      pbar.setBorder(new EmptyBorder(LF.isWin?3:1,0,0,0));
      btn = new Button("", new ImageIcon("images/stop.gif"));
      btn.setName("stop");
      btn.setContentAreaFilled(false);
      btn.setPreferredSize(new Dimension(22, 19)); 
      statusBar.add(btn);
      statusBar.add(pbar);
      statusBar.updateUI();
    }
    else if ( pbar.getParent() == null )
    {
      statusBar.add(btn);
      statusBar.add(pbar);
      statusBar.updateUI();
    }
    
    final Button myButton = btn;
    final Worker myWorker = worker;
    btn.addActionListener( new ActionListener() {
      Button btn = myButton;
      public void actionPerformed(ActionEvent e)
      {
        if ( !myWorker.isDone() )
        {
          myWorker.cancel();
        }
        btn.removeActionListener(this);
      }
    });
    
    messages.push(message);
    workers.push(worker);
    
    text.setText("Waiting for " + message);
   
  }
    
  while (!worker.isDone()) {};
  
  synchronized(this.getClass())
  {
    while(workers.size() > 0)
    {
      worker = (Worker)workers.peek();
      if (worker.isDone())
      {
         workers.pop();
         messages.pop();
      }
      else
      {
        text.setText("Waiting for " + (String) messages.peek());
      } 
    }
    
    if ( workers.size() == 0)
    {
      text.setText("Ready");
      statusBar.remove(pbar);
      statusBar.remove(btn);
      statusBar.updateUI();
      for (ActionListener listener: btn.getActionListeners())
      {
        try
        {
          btn.removeActionListener(listener);
        }
        catch (Exception e) {}
      }
      
        
    }

  }
      
    
  
      
  

  
  
  
     
 
        
  
 
  
  
  


    
  
  

  



		
