  import java.awt.BorderLayout;
  import java.awt.Dimension;
  import java.awt.Insets;
  import java.awt.event.*;
  
  import javax.swing.*;
  import javax.swing.border.*;
  
  log.debug("task is long running!");
  
  final WindowContext context = argObj("windowContext");
  final Runnable preloadIfLazy = argObj("preloadIfLazy");
  final Runnable postCancel = argObj("postCancel");
  final StatusBar statusBar = context.get("/statusBar");
  final Text text = statusBar.get("Ready");
  final Worker worker = argObj("worker");
  final String message = arg("waitOperation");
  
  if (preloadIfLazy != null)
    {
      try
      {
        SwingUtilities.invokeAndWait(new Runnable() {
          public void run() {
            preloadIfLazy.run();
          }
        });
      } catch (Exception e) { log.error("SWIW", e); }
    }
    
  
  synchronized (this.getClass())
  {
    Stack messages = statusBar.getProperty("messages");
    Stack workers = statusBar.getProperty("workers");
    final ProgressBar pbar = statusBar.get("pbar");
    
       
    if ( messages == null )
    {
       messages = new Stack();
       statusBar.setProperty("messages", messages);
    }
    
    if ( workers == null )
    {
       workers = new Stack();
       statusBar.setProperty("workers", workers);
    }
    
    try
    {
      SwingUtilities.invokeAndWait( new Runnable() {
        public void run()
        {
          Button btn = statusBar.get("stop");
          
          if ( pbar == null )
          {
            ProgressBar pbar = new ProgressBar();
            pbar.setIndeterminate(true);
            pbar.setPreferredSize(new Dimension(100, 17));
            pbar.setName("pbar");
            pbar.setBorder(new EmptyBorder(LF.isWin?3:1,0,0,0));
            btn = new Button("", new ImageIcon("images/stop.gif"));
            btn.setName("stop");
            btn.setToolTipText("Cancel All Pending Operations");
            btn.setContentAreaFilled(false);
            btn.setPreferredSize(new Dimension(22, 19)); 
            statusBar.add(btn);
            statusBar.add(pbar);
            statusBar.updateUI();
          }
          else if ( pbar.getParent() == null )
          {
            statusBar.add(btn);
            statusBar.add(pbar);
            statusBar.updateUI();
          }
          
          final Button myButton = btn;
          
          btn.addActionListener( new ActionListener() {
            Button btn = myButton;
            public void actionPerformed(ActionEvent e)
            {
              if ( !worker.isDone() )
              {
                worker.cancel();
                if ( postCancel != null )
                {
                  postCancel.run();
                }
              }
              btn.removeActionListener(this);
            }
          });
          
          text.setText("Waiting for " + message);
        }
      });
    } catch (Exception e) { log.error("SWIW", e); }

    messages.push(message);
    workers.push(worker);
  }
    
  while (!worker.isDone()) {};
  
  synchronized(this.getClass())
  {
    final Stack messages = statusBar.getProperty("messages");
    final Stack workers = statusBar.getProperty("workers");
    final ProgressBar pbar = statusBar.get("pbar");
    final Button btn = statusBar.get("stop");
    Worker myWorker = worker;
    
    while(workers.size() > 0)
    {
      myWorker = (Worker)workers.peek();
      if (myWorker.isDone())
      {
         workers.pop();
         messages.pop();
      }
      else
      {
          try
          {
            SwingUtilities.invokeAndWait( new Runnable() {
              public void run() {
                text.setText("Waiting for " + messages.peek());
              }
            });
          } catch (Exception e) { log.error("SWIW threw", e); }
      } 
    }
    
    if ( workers.size() == 0)
    {
      try
      {
        SwingUtilities.invokeAndWait( new Runnable() {
          public void run() {
            
            text.setText("Ready");
            statusBar.remove(pbar);
            statusBar.remove(btn);
            statusBar.updateUI();
            for (ActionListener listener: btn.getActionListeners())
            {
              try
              {
                btn.removeActionListener(listener);
              }
              catch (Exception e) {}
            }
          }
        });
      } catch (Exception e) { log.error("SWIW thre", e); }
      
        
    }


  } 
      
    
  
      
  

  
  
  
     
 
        
  
 
  
  
  


    
  
  

  



		
