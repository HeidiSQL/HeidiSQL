  import java.awt.BorderLayout;
  import javax.swing.*;
  import javax.swing.border.*;
  
  log.debug("task is long running!");
  
  WindowContext context = argObj("windowContext");
  Worker worker = argObj("worker");
  
  String message = arg("waitOperation");
  
  Panel statusBar = context.get("/statusBar");
  JLabel text = statusBar.getProperty("text");
  ProgressBar pbar = statusBar.getProperty("pbar");
  Stack messages = statusBar.getProperty("messages");
  Stack workers = statusBar.getProperty("workers");

   
  synchronized (this.getClass())
  {
    if ( text == null )
    {
       text = (JLabel)statusBar.getComponent(0);
       statusBar.setProperty("text", text);
    }
    
    if ( messages == null )
    {
       messages = new Stack();
       statusBar.setProperty("messages", messages);
    }
    
    if ( workers == null )
    {
       workers = new Stack();
       statusBar.setProperty("workers", workers);
    }
    
    if ( pbar == null )
    {
      pbar = new ProgressBar();
      pbar.setIndeterminate(true);
      pbar.setPreferredSize(new java.awt.Dimension(100, 10));      
      pbar.setBorder(new BevelBorder(BevelBorder.LOWERED));
      statusBar.setProperty("pbar", pbar);
    }
      
    messages.push(message);
    workers.push(worker);
    
    text.setText("Waiting for " + message);

    try
    {
      statusBar.getComponent(1);
    }
    catch (Exception e)
    {
      statusBar.add(pbar, BorderLayout.EAST);
    }
    statusBar.updateUI();
  }
    
  while (!worker.isDone()) {};
  
  synchronized(this.getClass())
  {
    while(workers.size() > 0)
    {
      worker = (Worker)workers.peek();
      if (worker.isDone())
      {
         workers.pop();
         messages.pop();
      }
      else
      {
        text.setText("Waiting for " + (String) messages.peek());
      } 
    }
    
    if ( workers.size() == 0)
    {
      text.setText("Ready");
      statusBar.remove(1);
      statusBar.updateUI();
    }

  }
      
    
  
      
  

  
  
  
     
 
        
  
 
  
  
  


    
  
  

  



		
