{*********************************************************}
{                                                         }
{                 Zeos Database Objects                   }
{              Database Sequence Component                }
{                                                         }
{    Copyright (c) 1999-2005 Zeos Development Group       }
{            Written by Stefan Glienke                  }
{                                                         }
{*********************************************************}

{*********************************************************}
{ License Agreement:                                      }
{                                                         }
{ This library is free software; you can redistribute     }
{ it and/or modify it under the terms of the GNU Lesser   }
{ General Public License as published by the Free         }
{ Software Foundation; either version 2.1 of the License, }
{ or (at your option) any later version.                  }
{                                                         }
{ This library is distributed in the hope that it will be }
{ useful, but WITHOUT ANY WARRANTY; without even the      }
{ implied warranty of MERCHANTABILITY or FITNESS FOR      }
{ A PARTICULAR PURPOSE.  See the GNU Lesser General       }
{ Public License for more details.                        }
{                                                         }
{ You should have received a copy of the GNU Lesser       }
{ General Public License along with this library; if not, }
{ write to the Free Software Foundation, Inc.,            }
{ 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA }
{                                                         }
{ The project web site is located on:                     }
{   http://www.sourceforge.net/projects/zeoslib.          }
{   http://www.zeoslib.sourceforge.net                    }
{                                                         }
{                                 Zeos Development Group. }
{*********************************************************}

unit ZSequence;

interface

{$I ZComponent.inc}

uses
  SysUtils, Classes, ZDbcIntfs, ZConnection;

type
  {** Represents a component which wraps a sequence to database. }
  TZSequence = class(TComponent)
  private
    FSequence: IZSequence;
    FConnection: TZConnection;
    FSequenceName: string;
    FBlockSize: Integer;
    procedure SetConnection(const Value: TZConnection);
    procedure SetBlockSize(const Value: Integer);
    procedure SetSequenceName(const Value: string);
  protected
    procedure Notification(AComponent: TComponent;
      Operation: TOperation); override;
    function GetSequence: IZSequence;
  public
    constructor Create(AOwner: TComponent); override;

    function GetCurrentValue: Int64;
    function GetNextValue: Int64;
  published
    property BlockSize: Integer read FBlockSize write SetBlockSize default 1;
    property Connection: TZConnection read FConnection write SetConnection;
    property SequenceName: string read FSequenceName write SetSequenceName;
  end;

implementation

{ TZSequence }

constructor TZSequence.Create(AOwner: TComponent);
begin
  inherited;
  FBlockSize := 1;
end;

{**
  Gets the current unique key generated by this sequence.
  @param the next generated unique key.
}
function TZSequence.GetCurrentValue: Int64;
begin
  GetSequence;
  if Assigned(FSequence) then
    Result := FSequence.GetCurrentValue
  else
    Result := 0;
end;

{**
  Gets the next unique key generated by this sequence.
  @param the next generated unique key.
}
function TZSequence.GetNextValue: Int64;
begin
  GetSequence;
  if Assigned(FSequence) then
    Result := FSequence.GetNextValue
  else
    Result := 0;
end;

function TZSequence.GetSequence: IZSequence;
begin
  if not Assigned(FSequence) then
  begin
    if Assigned(FConnection) and Assigned(FConnection.DbcConnection) then
      FSequence := FConnection.DbcConnection.CreateSequence(
        FSequenceName, FBlockSize);
  end;
  Result := FSequence;
end;

{**
  Processes component notifications.
  @param AComponent a changed component object.
  @param Operation a component operation code.
}
procedure TZSequence.Notification(AComponent: TComponent;
  Operation: TOperation);
begin
  inherited Notification(AComponent, Operation);

  if (Operation = opRemove) and (AComponent = FConnection) then
  begin
    FConnection := nil;
    FreeAndNil(FSequence);
  end;
end;

procedure TZSequence.SetBlockSize(const Value: Integer);
begin
  FBlockSize := Value;
  GetSequence;
  if Assigned(FSequence) then
    FSequence.SetBlockSize(FBlockSize);
end;

procedure TZSequence.SetConnection(const Value: TZConnection);
begin
  if FConnection <> Value then
  begin
    if Assigned(FSequence) then
      FSequence := nil;
    FConnection := Value;
    GetSequence;
  end;
end;

procedure TZSequence.SetSequenceName(const Value: string);
begin
  FSequenceName := Value;
  GetSequence;
  if Assigned(FSequence) then
    FSequence.SetName(FSequenceName);
end;

end.
